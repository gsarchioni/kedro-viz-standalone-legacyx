"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;
exports.updateGraphOnChange = void 0;
var _redux = require("redux");
var _reduxThunk = _interopRequireDefault(require("redux-thunk"));
var _reduxWatch = _interopRequireDefault(require("redux-watch"));
var _reducers = _interopRequireDefault(require("../reducers"));
var _layout = require("../selectors/layout");
var _graph = require("../actions/graph");
var _helpers = require("./helpers");
var _config = require("../config");
/**
 * Watch the getGraphInput selector, and dispatch an asynchronous action to
 * update state.graph via a web worker when it changes.
 * @param {Object} store Redux store
 */
const updateGraphOnChange = store => {
  const watchGraph = (0, _reduxWatch.default)(() => (0, _layout.getGraphInput)(store.getState()));
  store.subscribe(watchGraph(graphInput => {
    store.dispatch((0, _graph.calculateGraph)(graphInput));
  }));
};

/**
 * Save selected state properties to window.localStorage
 * @param {Object} state Redux state snapshot
 */
exports.updateGraphOnChange = updateGraphOnChange;
const saveStateToLocalStorage = state => {
  // does not save modal state to localStorage
  const {
    exportModal,
    metadataModal,
    settingsModal,
    shareableUrlModal,
    modularPipelineFocusMode,
    ...otherVisibleProps
  } = state.visible;
  (0, _helpers.saveLocalStorage)(_config.localStorageName, {
    node: {
      disabled: (0, _helpers.pruneFalseyKeys)(state.node.disabled)
    },
    nodeType: {
      disabled: state.nodeType.disabled
    },
    pipeline: {
      active: state.pipeline.active
    },
    layer: {
      visible: state.layer.visible
    },
    tag: {
      enabled: state.tag.enabled
    },
    textLabels: state.textLabels,
    visible: otherVisibleProps,
    theme: state.theme,
    isPrettyName: state.isPrettyName,
    showFeatureHints: state.showFeatureHints,
    userPreferences: state.userPreferences,
    flags: state.flags,
    expandAllPipelines: state.expandAllPipelines
  });

  // Store Run's metadata to localstorage
  (0, _helpers.saveLocalStorage)(_config.localStorageRunsMetadata, state.runsMetadata);
};

/**
 * Configure initial state and create the Redux store
 * @param {Object} initialState Initial Redux state (from initial-state.js)
 * @param {Object} dataType type of pipeline data - "static" or "json" (if data is loaded from API)
 * @return {Object} Redux store
 */
function configureStore(initialState, dataType) {
  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
  const store = (0, _redux.createStore)(_reducers.default, initialState, composeEnhancers((0, _redux.applyMiddleware)(_reduxThunk.default)));

  // dispatch the calculateGraph action to ensure the graph nodes still gets rendered
  // on initial load if data is loaded via data prop instead of fetching from Rest API
  if (dataType !== 'json') {
    store.dispatch((0, _graph.calculateGraph)((0, _layout.getGraphInput)(store.getState())));
  }
  updateGraphOnChange(store);
  store.subscribe(() => {
    saveStateToLocalStorage(store.getState());
  });
  return store;
}