"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockAPIFeatureSupport = exports.default = void 0;
var _utils = require("../../utils");
var _spaceflightsMock = _interopRequireDefault(require("../../utils/data/spaceflights.mock.json"));
var _demoMock = _interopRequireDefault(require("../../utils/data/demo.mock.json"));
var _node_taskMock = _interopRequireDefault(require("../../utils/data/node_task.mock.json"));
var _node_plotMock = _interopRequireDefault(require("../../utils/data/node_plot.mock.json"));
var _node_parametersMock = _interopRequireDefault(require("../../utils/data/node_parameters.mock.json"));
/**
 * Mimic old deprecated API formats which didn't include newer fields
 * such as pipelines, layers, tags, etc
 * @param {Object} data A dataset file
 */
const mockAPIFeatureSupport = data => {
  let dataCopy = Object.assign({}, data);
  if (window.deletePipelines) {
    delete dataCopy.selected_pipeline;
    delete dataCopy.pipelines;
  }
  return dataCopy;
};

/**
 * Create a promise that resolves after a timeout
 * @param {Number} milliseconds Timeout in milliseconds
 */
exports.mockAPIFeatureSupport = mockAPIFeatureSupport;
const timeout = milliseconds => new Promise(resolve => setTimeout(resolve, milliseconds));

/**
 * Mock asynchronously loading/parsing data
 * @param {String} path JSON file location. Defaults to main data url from config.js
 * @return {Function} A promise that will return when the file is loaded and parsed
 */
const loadJsonData = async function () {
  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _utils.getUrl)('main');
  // Add a short timeout to simulate real world use,
  // which should help catch race conditions
  await timeout(50);

  // Use spaceflights dataset in place of 'main' endpoint
  if (path.includes('main')) {
    return mockAPIFeatureSupport(_spaceflightsMock.default);
  }

  // Use nodeParameters dataset for node data
  if (path.includes('nodes/f1f1425b')) {
    return _node_parametersMock.default;
  }

  // Use nodePlot dataset for node data
  if (path.includes('nodes/c3p345ed')) {
    return _node_plotMock.default;
  }

  // Use nodeTask dataset in place of 'main' endpoint
  if (path.includes('nodes')) {
    return _node_taskMock.default;
  }

  // Use demo dataset for 'pipelines' endpoints
  if (path.includes('pipelines')) {
    return mockAPIFeatureSupport(_demoMock.default);
  }
  const fullPath = "/public".concat(path.substr(1));
  throw new Error("Unable to load pipeline data from ".concat(path, ". If you're running Kedro-Viz as a standalone (e.g. for JavaScript development), please check that you have placed a data file at ").concat(fullPath, "."));
};
var _default = exports.default = loadJsonData;