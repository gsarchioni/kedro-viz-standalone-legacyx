"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tabLabels = exports.statsRowLen = exports.sidebarWidth = exports.sidebarGroups = exports.sidebarElementTypes = exports.shortTypeMapping = exports.shareableUrlMessages = exports.settings = exports.routes = exports.params = exports.metricLimit = exports.metaSidebarWidth = exports.localStorageShareableUrl = exports.localStorageRunsMetadata = exports.localStorageName = exports.localStorageMetricsSelect = exports.localStorageFlowchartLink = exports.linkToFlowchartInitialVal = exports.largeGraphThreshold = exports.inputKeyToStateKeyMap = exports.hostingPlatforms = exports.globalToolbarWidth = exports.flags = exports.experimentTrackingLazyLoadingGap = exports.experimentTrackingLazyLoadingColours = exports.errorMessages = exports.defaultQueryParams = exports.datasetStatLabels = exports.codeSidebarWidth = exports.chartMinWidthScale = exports.RUN_TITLE = exports.RUN_NOTES = exports.PACKAGE_KEDRO_DATASETS = exports.PACKAGE_FSSPEC = exports.NODE_TYPES = exports.KEDRO_VIZ_PUBLISH_GCP_DOCS_URL = exports.KEDRO_VIZ_PUBLISH_DOCS_URL = exports.KEDRO_VIZ_PUBLISH_AZURE_DOCS_URL = exports.KEDRO_VIZ_PUBLISH_AWS_DOCS_URL = exports.KEDRO_VIZ_PREVIEW_DATASETS_DOCS_URL = exports.KEDRO_VIZ_DOCS_URL = void 0;
var _utils = require("./utils");
const localStorageName = exports.localStorageName = 'KedroViz';
const localStorageFlowchartLink = exports.localStorageFlowchartLink = 'KedroViz-link-to-flowchart';
const localStorageMetricsSelect = exports.localStorageMetricsSelect = 'KedroViz-metrics-chart-select';
const localStorageRunsMetadata = exports.localStorageRunsMetadata = 'KedroViz-runs-metadata';
const localStorageShareableUrl = exports.localStorageShareableUrl = 'KedroViz-shareable-url';
const linkToFlowchartInitialVal = exports.linkToFlowchartInitialVal = {
  fromURL: null,
  showGoBackBtn: false
};

// These values are used in both SCSS and JS, and we don't have variable-sharing
// across Sass and JavaScript, so they're defined in two places. If you update their
// value here, please also update their corresponding value in src/styles/_variables.scss
const globalToolbarWidth = exports.globalToolbarWidth = 80;
const metaSidebarWidth = exports.metaSidebarWidth = {
  closed: 0,
  open: 400
};
const sidebarWidth = exports.sidebarWidth = {
  breakpoint: 700,
  closed: 56 + globalToolbarWidth,
  open: 400 + globalToolbarWidth,
  pipelineUI: 344
};
const codeSidebarWidth = exports.codeSidebarWidth = {
  closed: 0,
  open: 480
};

// These colours variables come from styles/variables
const slate600 = '#0e222d';
const slate200 = '#21333e';
const grey200 = '#d5d8da';
const grey100 = '#eaebed';
const experimentTrackingLazyLoadingColours = exports.experimentTrackingLazyLoadingColours = {
  backgroundLightTheme: grey200,
  foregroundLightTheme: grey100,
  backgroundDarkTheme: slate600,
  foregroundDarkTheme: slate200
};
const metricLimit = exports.metricLimit = 50;
const experimentTrackingLazyLoadingGap = exports.experimentTrackingLazyLoadingGap = 38;
const chartMinWidthScale = exports.chartMinWidthScale = 0.25;

// Determine the number of nodes and edges in pipeline to trigger size warning
const largeGraphThreshold = exports.largeGraphThreshold = 1000;

// Remember to update the 'Flags' section in the README when updating these:
const flags = exports.flags = {
  sizewarning: {
    name: 'Size warning',
    description: 'Show a warning before rendering very large graphs',
    default: true,
    icon: '🐳'
  }
};
const settings = exports.settings = {
  isPrettyName: {
    name: 'Pretty name',
    description: 'Display a formatted name for the kedro nodes',
    default: false
  },
  showFeatureHints: {
    name: 'New feature hints',
    description: 'Enable or disable all new feature hints in the interface.',
    default: true
  },
  showDatasetPreviews: {
    name: 'Dataset previews',
    description: 'Display preview data for all datasets.',
    default: true
  }
};

// Sidebar groups is an ordered map of { id: label }
const sidebarGroups = exports.sidebarGroups = {
  elementType: 'Element types',
  tag: 'Tags'
};

// Sidebar element types is an ordered map of { id: label }
const sidebarElementTypes = exports.sidebarElementTypes = {
  task: 'Nodes',
  data: 'Datasets',
  parameters: 'Parameters'
};
const shortTypeMapping = exports.shortTypeMapping = {
  'plotly.plotly_dataset.PlotlyDataset': 'plotly',
  'plotly.json_dataset.JSONDataset': 'plotly',
  'matplotlib.matplotlib_writer.MatplotlibWriter': 'image',
  'tracking.json_dataset.JSONDataset': 'JSONTracking',
  'tracking.metrics_dataset.MetricsDataset': 'metricsTracking',
  'plotly.plotly_dataset.PlotlyDataSet': 'plotly',
  'plotly.json_dataset.JSONDataSet': 'plotly',
  'tracking.json_dataset.JSONDataSet': 'JSONTracking',
  'tracking.metrics_dataset.MetricsDataSet': 'metricsTracking'
};
const tabLabels = exports.tabLabels = ['Overview', 'Metrics', 'Plots'];

// URL parameters for each element/section
const params = exports.params = {
  focused: 'fid',
  selected: 'sid',
  selectedName: 'sn',
  pipeline: 'pid',
  run: 'run_ids',
  view: 'view',
  comparisonMode: 'comparison',
  types: 'types',
  tags: 'tags',
  expandAll: 'expandAllPipelines'
};
const activePipeline = "".concat(params.pipeline, "=:pipelineId");
const pathname = (0, _utils.sanitizedPathname)();
const routes = exports.routes = {
  flowchart: {
    main: pathname,
    focusedNode: "".concat(pathname, "?").concat(activePipeline, "&").concat(params.focused, "=:id"),
    selectedNode: "".concat(pathname, "?").concat(activePipeline, "&").concat(params.selected, "=:id"),
    selectedName: "".concat(pathname, "?").concat(activePipeline, "&").concat(params.selectedName, "=:fullName"),
    selectedPipeline: "".concat(pathname, "?").concat(activePipeline)
  },
  experimentTracking: {
    main: "".concat(pathname, "experiment-tracking"),
    selectedView: "".concat(pathname, "experiment-tracking?").concat(params.view, "=:view"),
    selectedRuns: "".concat(pathname, "experiment-tracking?").concat(params.run, "=:ids&").concat(params.view, "=:view&").concat(params.comparisonMode, "=:isComparison")
  }
};
const errorMessages = exports.errorMessages = {
  node: 'Please check the value of "selected_id"/"sid" or "selected_name"/"sn" in the URL',
  modularPipeline: 'Please check the value of "focused_id"/"fid" in the URL',
  pipeline: 'Please check the value of "pipeline_id"/"pid" in the URL',
  experimentTracking: "Please check the spelling of \"run_ids\" or \"view\" or \"comparison\" in the URL. It may be a typo \uD83D\uDE07",
  runIds: "Please check the value of \"run_ids\" in the URL. Perhaps you've deleted the entity \uD83D\uDE48 or it may be a typo \uD83D\uDE07"
};
const datasetStatLabels = exports.datasetStatLabels = ['rows', 'columns', 'file_size'];
const statsRowLen = exports.statsRowLen = 33;
const hostingPlatforms = exports.hostingPlatforms = {
  aws: 'Amazon Web Services',
  gcp: 'Google Cloud',
  azure: 'Microsoft Azure'
};
const shareableUrlMessages = function (status) {
  let info = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  const messages = {
    failure: 'Something went wrong. Please try again later.',
    loading: 'Shooting your files through space. Sit tight...',
    success: 'The deployment has been successful and Kedro-Viz is hosted via the link below..',
    incompatible: "Publishing Kedro-Viz is only supported with fsspec>=2023.9.0. You are currently on version ".concat(info, ".\n\nPlease upgrade fsspec to a supported version and ensure you're using Kedro 0.18.2 or above.")
  };
  return messages[status];
};
exports.shareableUrlMessages = shareableUrlMessages;
const inputKeyToStateKeyMap = exports.inputKeyToStateKeyMap = {
  // eslint-disable-next-line camelcase
  bucket_name: 'hasBucketName',
  platform: 'hasPlatform',
  endpoint: 'hasEndpoint'
};
const RUN_TITLE = exports.RUN_TITLE = 'title';
const RUN_NOTES = exports.RUN_NOTES = 'notes';
const PACKAGE_FSSPEC = exports.PACKAGE_FSSPEC = 'fsspec';
const PACKAGE_KEDRO_DATASETS = exports.PACKAGE_KEDRO_DATASETS = 'kedro-datasets';
const KEDRO_VIZ_DOCS_URL = exports.KEDRO_VIZ_DOCS_URL = 'https://docs.kedro.org/projects/kedro-viz/en/latest/';
const KEDRO_VIZ_PUBLISH_DOCS_URL = exports.KEDRO_VIZ_PUBLISH_DOCS_URL = "".concat(KEDRO_VIZ_DOCS_URL, "share_kedro_viz.html");
const KEDRO_VIZ_PREVIEW_DATASETS_DOCS_URL = exports.KEDRO_VIZ_PREVIEW_DATASETS_DOCS_URL = "".concat(KEDRO_VIZ_DOCS_URL, "preview_datasets.html#disabling-previews");
const KEDRO_VIZ_PUBLISH_AWS_DOCS_URL = exports.KEDRO_VIZ_PUBLISH_AWS_DOCS_URL = "".concat(KEDRO_VIZ_DOCS_URL, "publish_and_share_kedro_viz_on_aws.html#set-up-endpoint");
const KEDRO_VIZ_PUBLISH_AZURE_DOCS_URL = exports.KEDRO_VIZ_PUBLISH_AZURE_DOCS_URL = "".concat(KEDRO_VIZ_DOCS_URL, "publish_and_share_kedro_viz_on_azure.html#set-up-endpoint");
const KEDRO_VIZ_PUBLISH_GCP_DOCS_URL = exports.KEDRO_VIZ_PUBLISH_GCP_DOCS_URL = "".concat(KEDRO_VIZ_DOCS_URL, "publish_and_share_kedro_viz_on_gcp.html#set-up-endpoint");
const defaultQueryParams = exports.defaultQueryParams = [params.types, params.tags, params.expandAll, params.pipeline];
const NODE_TYPES = exports.NODE_TYPES = {
  task: {
    name: 'nodes',
    defaultState: false
  },
  data: {
    name: 'datasets',
    defaultState: false
  },
  parameters: {
    name: 'parameters',
    defaultState: true
  }
};