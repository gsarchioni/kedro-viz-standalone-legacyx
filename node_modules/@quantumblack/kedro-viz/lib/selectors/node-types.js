"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isModularPipelineType = exports.getTypeNodeCount = exports.getNodeTypes = exports.getNodeTypeIDs = void 0;
var _reselect = require("reselect");
var _disabled = require("./disabled");
var _utils = require("../utils");
const getNodeIDs = state => state.node.ids;
const getNodeType = state => state.node.type;
const getNodeTypeIDs = state => state.nodeType.ids;
exports.getNodeTypeIDs = getNodeTypeIDs;
const getNodeTypeName = state => state.nodeType.name;
const getNodeTypeDisabled = state => state.nodeType.disabled;
const isModularPipelineType = type => type === 'modularPipeline';

/**
 * Calculate the total number of nodes (and the number of visible nodes)
 * for each node-type
 */
exports.isModularPipelineType = isModularPipelineType;
const getTypeNodeCount = exports.getTypeNodeCount = (0, _reselect.createSelector)([getNodeTypeIDs, getNodeIDs, getNodeType, _disabled.getNodeDisabled], (types, nodeIDs, nodeType, nodeDisabled) => (0, _utils.arrayToObject)(types, type => {
  const typeNodeIDs = nodeIDs.filter(nodeID => nodeType[nodeID] === type);
  const visibleTypeNodeIDs = typeNodeIDs.filter(nodeID => !nodeDisabled[nodeID]);
  return {
    total: typeNodeIDs.length,
    visible: visibleTypeNodeIDs.length
  };
}));

/**
 * Get formatted list of node type objects
 */
const getNodeTypes = exports.getNodeTypes = (0, _reselect.createSelector)([getNodeTypeIDs, getNodeTypeName, getNodeTypeDisabled, getTypeNodeCount], (types, typeName, typeDisabled, typeNodeCount) => types.map(id => ({
  id,
  name: typeName[id],
  disabled: typeDisabled[id],
  nodeCount: typeNodeCount[id]
})));