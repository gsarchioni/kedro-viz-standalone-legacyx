"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVisibleMetaSidebar = exports.getClickedNodeMetaData = void 0;
var _reselect = require("reselect");
var _nodes = require("./nodes");
var _utils = require("../utils");
const getClickedNode = state => state.node.clicked;
const getDisplayMetadataPanel = state => state.display.metadataPanel;
/**
 * Comparison for sorting alphabetically by name, otherwise by value
 */
const sortAlpha = (a, b) => (a.name || a).localeCompare(b.name || b);

/**
 * Returns true if metadata sidebar is visible
 */
const getVisibleMetaSidebar = exports.getVisibleMetaSidebar = (0, _reselect.createSelector)([getClickedNode, getDisplayMetadataPanel], (nodeClicked, metadataPanel) => metadataPanel ? Boolean(nodeClicked) : false);

/**
 * Gets metadata for the currently clicked node if any
 */
const getClickedNodeMetaData = exports.getClickedNodeMetaData = (0, _reselect.createSelector)([getClickedNode, _nodes.getNodeLabel, _nodes.getNodeFullName, _nodes.getNodeName, state => state.node.type, state => state.node.tags, state => state.tag.name, state => state.pipeline, state => state.node.filepath, state => state.node.inputs, state => state.node.outputs, state => state.node.code, state => state.node.parameters, state => state.node.datasetType, state => state.node.originalType, state => state.node.transcodedTypes, state => state.node.runCommand, state => state.node.preview, state => state.node.previewType, state => state.node.stats, state => state.isPrettyName, state => state.node.overview, state => state.node.documentation_url], (nodeId, nodeLabel, nodeFullName, nodePrettyName, nodeType, nodeTags, tagNames, pipeline, nodeFilepaths, nodeInputs, nodeOutputs, nodeCodes, nodeParameters, nodeDatasetTypes, nodeOriginalTypes, nodeTranscodedTypes, nodeRunCommand, preview, previewType, stats, isPrettyName, nodeOverview, nodeDocumentationURL) => {
  if (!nodeId || Object.keys(nodeType).length === 0) {
    return null;
  }
  const metadata = {
    id: nodeId,
    name: nodeLabel[nodeId],
    fullName: nodeFullName[nodeId],
    prettyName: nodePrettyName[nodeId],
    type: nodeType[nodeId],
    tags: [...nodeTags[nodeId]].map(tagId => tagNames[tagId]).sort(sortAlpha),
    pipeline: pipeline.name[pipeline.active],
    parameters: nodeParameters[nodeId],
    runCommand: nodeRunCommand[nodeId],
    code: nodeCodes[nodeId],
    filepath: nodeFilepaths[nodeId],
    datasetType: nodeDatasetTypes[nodeId],
    originalType: nodeOriginalTypes[nodeId],
    transcodedTypes: nodeTranscodedTypes[nodeId],
    inputs: isPrettyName ? nodeInputs[nodeId] && nodeInputs[nodeId].map(nodeInput => (0, _utils.prettifyName)((0, _utils.stripNamespace)(nodeInput))) : nodeInputs[nodeId] && nodeInputs[nodeId].map(nodeInput => (0, _utils.stripNamespace)(nodeInput)),
    outputs: isPrettyName ? nodeOutputs[nodeId] && nodeOutputs[nodeId].map(nodeOutput => (0, _utils.prettifyName)((0, _utils.stripNamespace)(nodeOutput))) : nodeOutputs[nodeId] && nodeOutputs[nodeId].map(nodeOutput => (0, _utils.stripNamespace)(nodeOutput)),
    preview: preview && preview[nodeId],
    previewType: previewType && previewType[nodeId],
    stats: stats && stats[nodeId],
    overview: nodeOverview[nodeId],
    documentationURL: nodeDocumentationURL[nodeId],
  };
  return metadata;
});