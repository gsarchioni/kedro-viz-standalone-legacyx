"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schemaLink = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _schema = require("@apollo/client/link/schema");
var _schema2 = require("@graphql-tools/schema");
var _graphqlTypeJson = _interopRequireWildcard(require("graphql-type-json"));
var _graphqlTag = _interopRequireDefault(require("graphql-tag"));
var _templateObject;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const typeDefs = (0, _graphqlTag.default)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n  \"\"\"\n  Generic scalar type representing a JSON object\n  \"\"\"\n  scalar JSONObject\n\n  type Mutation {\n    updateRunDetails(\n      runId: ID!\n      runInput: RunInput!\n    ): UpdateUserDetailsResponse!\n  }\n\n  type Query {\n    runsList: [Run!]!\n    runMetadata(runIds: [ID!]!): [Run!]!\n    runTrackingData(\n      runIds: [ID!]!\n      showDiff: Boolean = false\n    ): [TrackingDataset!]!\n  }\n\n  type Run {\n    id: ID!\n    title: String!\n    author: String\n    gitBranch: String\n    gitSha: String\n    bookmark: Boolean\n    notes: String\n    runCommand: String\n  }\n\n  input RunInput {\n    bookmark: Boolean = null\n    title: String = null\n    notes: String = null\n  }\n\n  type TrackingDataset {\n    datasetName: String\n    datasetType: String\n    data: JSONObject\n  }\n\n  type UpdateRunDetailsFailure {\n    id: ID!\n    errorMessage: String!\n  }\n\n  union UpdateUserDetailsResponse =\n      UpdateUserDetailsSuccess\n    | UpdateRunDetailsFailure\n\n  type UpdateUserDetailsSuccess {\n    run: Run!\n  }\n"])));
const resolvers = {
  JSON: _graphqlTypeJson.default,
  JSONObject: _graphqlTypeJson.GraphQLJSONObject
};
const schemaLink = exports.schemaLink = new _schema.SchemaLink({
  schema: (0, _schema2.makeExecutableSchema)({
    typeDefs,
    resolvers
  })
});