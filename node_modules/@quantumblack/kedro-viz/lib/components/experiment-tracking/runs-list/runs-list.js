"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _searchUtils = require("../../../utils/search-utils");
var _searchList = _interopRequireDefault(require("../../search-list"));
var _switch = _interopRequireDefault(require("../../ui/switch"));
var _accordion = _interopRequireDefault(require("../accordion"));
var _runsListCard = _interopRequireDefault(require("../runs-list-card"));
var _config = require("../../../config");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Return only the runs that match the search text
 * @param {Object} runData original set of runs
 * @param {String} searchValue Search term
 * @return {Object} Grouped nodes
 */
const getFilteredRunList = (runData, searchValue, runsMetadata) => {
  // filter the runs that matches the runId
  const filteredRuns = runData === null || runData === void 0 ? void 0 : runData.filter(run => {
    var _runsMetadata$run$id, _runsMetadata$run$id2;
    return (0, _searchUtils.textMatchesSearch)(((_runsMetadata$run$id = runsMetadata[run.id]) === null || _runsMetadata$run$id === void 0 ? void 0 : _runsMetadata$run$id.title) || run.id, searchValue) || (0, _searchUtils.textMatchesSearch)(((_runsMetadata$run$id2 = runsMetadata[run.id]) === null || _runsMetadata$run$id2 === void 0 ? void 0 : _runsMetadata$run$id2.notes) || '', searchValue) || (0, _searchUtils.textMatchesSearch)(run.gitSha, searchValue);
  });
  return filteredRuns;
};
const RunsList = _ref => {
  let {
    disableRunSelection,
    enableComparisonView,
    isDisplayingMetrics,
    onRunSelection,
    onToggleComparisonView,
    runData,
    selectedRunIds,
    runsMetadata
  } = _ref;
  const [searchValue, updateSearchValue] = (0, _react.useState)('');
  const condensedRunsList = isDisplayingMetrics ? runData.slice(0, _config.metricLimit) : runData;
  const filteredRunList = getFilteredRunList(condensedRunsList, searchValue, runsMetadata);
  const bookmarkedRuns = filteredRunList.filter(run => runsMetadata[run.id] && runsMetadata[run.id].bookmark === true);
  const unbookmarkedRuns = filteredRunList.filter(run => !runsMetadata[run.id] || !runsMetadata[run.id].bookmark);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "runs-list-top-wrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "search-bar-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_searchList.default, {
    onUpdateSearchValue: (0, _debounce.default)(updateSearchValue, 250),
    searchValue: searchValue
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "compare-switch-wrapper"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "compare-switch-wrapper__text"
  }, "Compare runs (max. 3)"), /*#__PURE__*/_react.default.createElement(_switch.default, {
    defaultChecked: enableComparisonView,
    onChange: onToggleComparisonView
  }))), bookmarkedRuns.length > 0 ? /*#__PURE__*/_react.default.createElement(_accordion.default, {
    heading: "Bookmarked",
    headingClassName: "runs-list__accordion-header",
    headingDetail: bookmarkedRuns.length
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "runs-list__wrapper"
  }, bookmarkedRuns.map(data => /*#__PURE__*/_react.default.createElement(_runsListCard.default, {
    data: data,
    disableRunSelection: disableRunSelection,
    enableComparisonView: enableComparisonView,
    key: data.id,
    onRunSelection: onRunSelection,
    selectedRunIds: selectedRunIds,
    searchValue: searchValue,
    selectedIndex: selectedRunIds.indexOf(data.id)
  })))) : null, unbookmarkedRuns.length > 0 ? /*#__PURE__*/_react.default.createElement(_accordion.default, {
    heading: "".concat(bookmarkedRuns.length === 0 ? 'All' : 'Unbookmarked'),
    headingClassName: "runs-list__accordion-header",
    headingDetail: unbookmarkedRuns.length
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "runs-list__wrapper"
  }, unbookmarkedRuns.map(data => /*#__PURE__*/_react.default.createElement(_runsListCard.default, {
    data: data,
    disableRunSelection: disableRunSelection,
    enableComparisonView: enableComparisonView,
    key: data.id,
    onRunSelection: onRunSelection,
    selectedRunIds: selectedRunIds,
    searchValue: searchValue,
    selectedIndex: selectedRunIds.indexOf(data.id)
  })))) : null);
};
const mapStateToProps = state => ({
  runsMetadata: state.runsMetadata
});
exports.mapStateToProps = mapStateToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps)(RunsList);