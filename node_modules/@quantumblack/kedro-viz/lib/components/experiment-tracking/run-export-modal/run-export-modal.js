"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _reactRedux = require("react-redux");
var _reactCsv = require("react-csv");
var _experimentTrackingUtils = require("../../../utils/experiment-tracking-utils");
var _buttonTimeoutContext = require("../../../utils/button-timeout-context");
var _button = _interopRequireDefault(require("../../ui/button"));
var _modal = _interopRequireDefault(require("../../ui/modal"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const RunExportModal = _ref => {
  let {
    runMetadata,
    runTrackingData,
    setShowRunExportModal,
    theme,
    visible,
    runsMetadata
  } = _ref;
  const [exportData, setExportData] = (0, _react.useState)([]);
  const {
    isSuccessful,
    showModal,
    handleClick
  } = (0, _react.useContext)(_buttonTimeoutContext.ButtonTimeoutContext);
  const updateExportData = (0, _react.useCallback)(() => {
    const mergedRunsMetadata = runMetadata === null || runMetadata === void 0 ? void 0 : runMetadata.map(run => {
      var _runsMetadata$run$id, _runsMetadata$run$id2;
      return {
        ...run,
        ...{
          title: ((_runsMetadata$run$id = runsMetadata[run.id]) === null || _runsMetadata$run$id === void 0 ? void 0 : _runsMetadata$run$id.title) || run.id,
          notes: ((_runsMetadata$run$id2 = runsMetadata[run.id]) === null || _runsMetadata$run$id2 === void 0 ? void 0 : _runsMetadata$run$id2.notes) || ''
        }
      };
    });

    // Require to opt-out of automatic batching in React 18
    (0, _reactDom.flushSync)(() => {
      setExportData((0, _experimentTrackingUtils.constructExportData)(mergedRunsMetadata, runTrackingData));
      handleClick();
    });
  }, [runMetadata, runTrackingData, handleClick, runsMetadata]);

  // only if the component is visible first, then apply isSuccessful to show or hide modal
  (0, _react.useEffect)(() => {
    if (visible && isSuccessful) {
      setShowRunExportModal(showModal);
    }
  }, [showModal, setShowRunExportModal, isSuccessful, visible]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-run-export-modal pipeline-run-export-modal--experiment-tracking"
  }, /*#__PURE__*/_react.default.createElement(_modal.default, {
    closeModal: () => setShowRunExportModal(false),
    theme: theme,
    title: "Export experiment run",
    visible: visible
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "run-export-modal-button-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    mode: "secondary",
    onClick: () => setShowRunExportModal(false),
    size: "small"
  }, "Cancel"), /*#__PURE__*/_react.default.createElement(_reactCsv.CSVLink, {
    asyncOnClick: true,
    className: isSuccessful ? 'run-export-modal-export-button--success' : 'run-export-modal-export-button',
    data: exportData,
    filename: "run-data.csv",
    onClick: updateExportData
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    dataTest: 'run-export-modal-export-all',
    mode: isSuccessful ? 'success' : 'primary',
    size: "small"
  }, isSuccessful ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Done ", /*#__PURE__*/_react.default.createElement("span", {
    className: "success-check-mark"
  }, "\u2705")) : 'Export all and close')))));
};
const mapStateToProps = state => ({
  runsMetadata: state.runsMetadata
});
exports.mapStateToProps = mapStateToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps)(RunExportModal);