"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _classnames = _interopRequireDefault(require("classnames"));
var _hooks = require("../../../utils/hooks");
var _dateUtils = require("../../../utils/date-utils");
var _close = _interopRequireDefault(require("../../icons/close"));
var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));
var _kebab = _interopRequireDefault(require("../../icons/kebab"));
var _selectedPin = _interopRequireDefault(require("../../icons/selected-pin"));
var _unSelectedPin = _interopRequireDefault(require("../../icons/un-selected-pin"));
var _reactTransitionGroup = require("react-transition-group");
var _runMetadataLoader = require("./run-metadata-loader");
var _actions = require("../../../actions");
var _config = require("../../../config");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Return a '-' character if the value is empty or null
const sanitiseEmptyValue = value => {
  return value === '' || value === null ? '-' : value;
};
const HiddenMenu = _ref => {
  let {
    runsMetadata,
    runId,
    onToggleBookmark
  } = _ref;
  const [isVisible, setIsVisible] = (0, _react.useState)(false);
  const {
    bookmark = false
  } = runsMetadata[runId] || {};
  const handleClickOutside = (0, _react.useCallback)(() => {
    setIsVisible(false);
  }, []);
  const menuRef = (0, _hooks.useOutsideClick)(handleClickOutside);
  const toggleBookmark = () => {
    onToggleBookmark(!bookmark, runId);

    // Close the menu when the bookmark is toggled.
    setIsVisible(false);
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "hidden-menu-wrapper",
    onClick: () => setIsVisible(!isVisible),
    ref: menuRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('hidden-menu', {
      'hidden-menu--visible': isVisible
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "hidden-menu__item",
    onClick: e => {
      toggleBookmark();
      e.stopPropagation();
    }
  }, bookmark ? 'Unbookmark' : 'Bookmark')), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    active: isVisible,
    ariaLabel: "Runs menu",
    className: "pipeline-menu-button--labels",
    icon: _kebab.default
  }));
};
const RunMetadata = _ref2 => {
  let {
    activeTab,
    enableComparisonView,
    enableShowChanges = false,
    isSingleRun,
    onRunSelection,
    pinnedRun,
    runs = [],
    setPinnedRun,
    setRunMetadataToEdit,
    setShowRunDetailsModal,
    showLoader,
    theme,
    runsMetadata,
    onToggleBookmark
  } = _ref2;
  let initialState = {};
  for (let i = 0; i < runs.length; i++) {
    initialState[i] = false;
  }
  const [toggleNotes, setToggleNotes] = (0, _react.useState)(initialState);
  const onToggleNoteExpand = index => {
    setToggleNotes({
      ...toggleNotes,
      [index]: !toggleNotes[index]
    });
  };
  const onTitleOrNoteClick = id => {
    const metadata = runs.find(run => run.id === id);
    setRunMetadataToEdit(metadata);
    setShowRunDetailsModal(true);
  };
  const getNotesByRunId = runId => {
    if (runsMetadata[runId]) {
      return runsMetadata[runId][_config.RUN_NOTES] || '';
    }
    return '';
  };
  const getTitleByRunId = runId => {
    if (runsMetadata[runId]) {
      return runsMetadata[runId][_config.RUN_TITLE] || runId;
    }
    return runId;
  };

  // Initialize title and notes for each run
  const runsWithMetadata = runs.map(run => ({
    ...run,
    title: getTitleByRunId(run.id),
    notes: getNotesByRunId(run.id)
  }));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('details-metadata', {
      'details-metadata--not-overview': activeTab !== 'Overview'
    })
  }, /*#__PURE__*/_react.default.createElement("table", {
    className: (0, _classnames.default)('details-metadata__table', {
      'details-metadata__table-comparison-view': enableComparisonView
    })
  }, runsWithMetadata.map((run, i) => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
    key: run.id + i
  }, i === 0 ? /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", {
    className: (0, _classnames.default)('details-metadata__run', 'details-metadata__labels', {
      'details-metadata__labels-comparison-view': enableComparisonView
    })
  }, /*#__PURE__*/_react.default.createElement("td", {
    className: "details-metadata__title"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "details-metadata__title-detail",
    onClick: () => onTitleOrNoteClick(run.id),
    title: sanitiseEmptyValue(run.title)
  }, sanitiseEmptyValue(run.title))), activeTab !== 'Plots' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("td", {
    className: "details-metadata__table-label"
  }, "Created By"), /*#__PURE__*/_react.default.createElement("td", {
    className: "details-metadata__table-label"
  }, "Creation Date"), /*#__PURE__*/_react.default.createElement("td", {
    className: "details-metadata__table-label"
  }, "Git SHA"), /*#__PURE__*/_react.default.createElement("td", {
    className: "details-metadata__table-label"
  }, "Git Branch"), /*#__PURE__*/_react.default.createElement("td", {
    className: "details-metadata__table-label"
  }, "Run Command"), /*#__PURE__*/_react.default.createElement("td", {
    className: "details-metadata__table-label"
  }, "Notes")) : null)) : null)), /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.TransitionGroup, {
    className: "details-metadata__run--wrapper",
    component: 'tbody'
  }, runsWithMetadata.map((run, i) => {
    const humanReadableTime = (0, _dateUtils.toHumanReadableTime)(run.id);
    return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
      classNames: 'details-metadata__run-animation',
      enter: isSingleRun ? false : true,
      exit: isSingleRun ? false : true,
      key: run.id,
      timeout: 300
    }, /*#__PURE__*/_react.default.createElement("tr", {
      className: (0, _classnames.default)('details-metadata__run', {
        'details-metadata__run--first-run': i === 0,
        'details-metadata__run--first-run-comparison-view': i === 0 && enableComparisonView
      })
    }, /*#__PURE__*/_react.default.createElement("td", {
      className: "details-metadata__title"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('details-metadata__indicator', {
        'details-metadata__indicator--selected-first': i === 0,
        'details-metadata__indicator--selected-second': i === 1,
        'details-metadata__indicator--selected-third': i === 2
      })
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "details-metadata__title-detail",
      onClick: () => onTitleOrNoteClick(run.id),
      title: sanitiseEmptyValue(run.title)
    }, sanitiseEmptyValue(run.title)), /*#__PURE__*/_react.default.createElement("ul", {
      className: "details-metadata__buttons"
    }, !isSingleRun ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      active: run.id === pinnedRun,
      ariaLive: "polite",
      className: (0, _classnames.default)('pipeline-menu-button--labels', 'pipeline-menu-button__pin', {
        'details-metadata__buttons--selected-pin': run.id === pinnedRun
      }),
      icon: run.id === pinnedRun ? _selectedPin.default : _unSelectedPin.default,
      labelText: run.id === pinnedRun ? 'Baseline' : 'Make baseline',
      labelTextPosition: "bottom",
      onClick: () => setPinnedRun(run.id),
      visible: enableShowChanges
    }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
      ariaLive: "polite",
      className: "pipeline-menu-button--labels__close",
      icon: _close.default,
      labelText: "Remove run",
      labelTextPosition: "bottom",
      onClick: () => onRunSelection(run.id)
    })) : null, /*#__PURE__*/_react.default.createElement(HiddenMenu, {
      runsMetadata: runsMetadata,
      onToggleBookmark: onToggleBookmark,
      runId: run.id
    }))), activeTab !== 'Plots' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("td", {
      className: "details-metadata__table-value"
    }, sanitiseEmptyValue(run.author)), /*#__PURE__*/_react.default.createElement("td", {
      className: "details-metadata__table-value"
    }, "".concat(humanReadableTime, " (").concat(sanitiseEmptyValue(run.id), ")")), /*#__PURE__*/_react.default.createElement("td", {
      className: "details-metadata__table-value"
    }, sanitiseEmptyValue(run.gitSha)), /*#__PURE__*/_react.default.createElement("td", {
      className: "details-metadata__table-value"
    }, sanitiseEmptyValue(run.gitBranch)), /*#__PURE__*/_react.default.createElement("td", {
      className: "details-metadata__table-value"
    }, sanitiseEmptyValue(run.runCommand)), /*#__PURE__*/_react.default.createElement("td", {
      className: "details-metadata__table-value"
    }, /*#__PURE__*/_react.default.createElement("p", {
      className: (0, _classnames.default)('details-metadata__notes', 'details-metadata__table-label'),
      onClick: () => onTitleOrNoteClick(run.id),
      style: toggleNotes[i] ? {
        display: 'block'
      } : null
    }, run.notes !== '' ? run.notes : '- Add notes here'), run.notes.length > 100 ? /*#__PURE__*/_react.default.createElement("button", {
      className: "details-metadata__show-more kedro",
      onClick: () => onToggleNoteExpand(i)
    }, toggleNotes[i] ? 'Show less' : 'Show more') : null)) : null));
  })), showLoader && /*#__PURE__*/_react.default.createElement(_runMetadataLoader.MetaDataLoader, {
    length: runs.length,
    theme: theme
  })));
};
const mapStateToProps = state => ({
  runsMetadata: state.runsMetadata
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onToggleBookmark: (bookmark, runId) => {
    dispatch((0, _actions.toggleBookmark)(bookmark, runId));
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(RunMetadata);