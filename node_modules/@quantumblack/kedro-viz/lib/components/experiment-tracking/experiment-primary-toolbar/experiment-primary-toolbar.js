"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = exports.ExperimentPrimaryToolbar = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _iconButton = _interopRequireDefault(require("../../ui/icon-button"));
var _pencil = _interopRequireDefault(require("../../icons/pencil"));
var _bookmark = _interopRequireDefault(require("../../icons/bookmark"));
var _export = _interopRequireDefault(require("../../icons/export"));
var _bookmarkStroke = _interopRequireDefault(require("../../icons/bookmark-stroke"));
var _primaryToolbar = _interopRequireDefault(require("../../primary-toolbar"));
var _showChanges = _interopRequireDefault(require("../../icons/show-changes"));
var _actions = require("../../../actions");
var _slidingAnimation = require("./sliding-animation");
const duration = 300;
const ExperimentPrimaryToolbar = _ref => {
  var _runsMetadata$selecte;
  let {
    displaySidebar,
    enableComparisonView,
    enableShowChanges,
    selectedRunData,
    setEnableShowChanges,
    setSidebarVisible,
    showChangesIconDisabled,
    showRunDetailsModal,
    sidebarVisible,
    setShowRunExportModal,
    onToggleBookmark,
    runsMetadata
  } = _ref;
  const bookmark = (_runsMetadata$selecte = runsMetadata[selectedRunData === null || selectedRunData === void 0 ? void 0 : selectedRunData.id]) === null || _runsMetadata$selecte === void 0 ? void 0 : _runsMetadata$selecte.bookmark;
  const toggleBookmark = () => {
    onToggleBookmark(!bookmark, selectedRunData === null || selectedRunData === void 0 ? void 0 : selectedRunData.id);
  };
  return /*#__PURE__*/_react.default.createElement(_primaryToolbar.default, {
    displaySidebar: displaySidebar,
    onToggleSidebar: setSidebarVisible,
    visible: {
      sidebar: sidebarVisible
    },
    dataTest: "sidebar-experiments-visible-btn-".concat(sidebarVisible)
  }, /*#__PURE__*/_react.default.createElement(_slidingAnimation.SlideFromLeftToRight, {
    state: enableComparisonView,
    duration: duration
  }, enableComparisonView && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    active: enableShowChanges,
    ariaLabel: "Toggle show changes",
    className: 'pipeline-menu-button--labels',
    dataTest: "sidebar-experiments-show-changes-btn-".concat(enableShowChanges),
    disabled: showChangesIconDisabled,
    icon: _showChanges.default,
    labelText: !showChangesIconDisabled ? "".concat(enableShowChanges ? 'Disable' : 'Enable', " show changes") : null,
    onClick: () => setEnableShowChanges(!enableShowChanges)
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: "Export Run Data",
    dataTest: 'sidebar-experiments-export-runs',
    className: 'pipeline-menu-button--export-runs',
    icon: _export.default,
    labelText: "Export run data",
    onClick: () => setShowRunExportModal(true)
  }))), /*#__PURE__*/_react.default.createElement(_slidingAnimation.SlideFromRightToLeft, {
    state: !enableComparisonView,
    duration: duration
  }, !enableComparisonView && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    active: bookmark,
    ariaLabel: "Toggle run bookmark",
    className: 'pipeline-menu-button--labels',
    dataTest: "sidebar-experiments-bookmark-btn-".concat(bookmark),
    icon: bookmark ? _bookmark.default : _bookmarkStroke.default,
    labelText: "".concat(bookmark ? 'Unbookmark' : 'Bookmark'),
    onClick: () => toggleBookmark()
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: "Edit run details",
    className: 'pipeline-menu-button--labels',
    dataTest: 'sidebar-experiments-edit-details',
    icon: _pencil.default,
    labelText: "Edit details",
    onClick: () => showRunDetailsModal(true)
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: "Export Run Data",
    className: 'pipeline-menu-button--export-runs',
    dataTest: 'sidebar-experiments-export-runs',
    icon: _export.default,
    labelText: "Export run data",
    onClick: () => setShowRunExportModal(true)
  }))));
};
exports.ExperimentPrimaryToolbar = ExperimentPrimaryToolbar;
const mapStateToProps = state => ({
  runsMetadata: state.runsMetadata
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onToggleBookmark: (bookmark, runId) => {
    dispatch((0, _actions.toggleBookmark)(bookmark, runId));
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ExperimentPrimaryToolbar);