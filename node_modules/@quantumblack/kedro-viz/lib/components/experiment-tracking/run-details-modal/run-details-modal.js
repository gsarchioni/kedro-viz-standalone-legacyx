"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _actions = require("../../../actions");
var _buttonTimeoutContext = require("../../../utils/button-timeout-context");
var _button = _interopRequireDefault(require("../../ui/button"));
var _modal = _interopRequireDefault(require("../../ui/modal"));
var _input = _interopRequireDefault(require("../../ui/input"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const RunDetailsModal = _ref => {
  let {
    runMetadataToEdit,
    setShowRunDetailsModal,
    theme,
    visible,
    runsMetadata,
    onUpdateRunTitle,
    onUpdateRunNotes
  } = _ref;
  const [valuesToUpdate, setValuesToUpdate] = (0, _react.useState)({});
  const {
    handleClick,
    hasNotInteracted,
    isSuccessful,
    setHasNotInteracted,
    setIsSuccessful,
    showModal
  } = (0, _react.useContext)(_buttonTimeoutContext.ButtonTimeoutContext);
  const onApplyChanges = () => {
    onUpdateRunTitle(valuesToUpdate.title, runMetadataToEdit.id);
    onUpdateRunNotes(valuesToUpdate.notes, runMetadataToEdit.id);
    handleClick();
    setIsSuccessful(true);
  };
  const onChange = (key, value) => {
    setValuesToUpdate(Object.assign({}, valuesToUpdate, {
      [key]: value
    }));
    setHasNotInteracted(false);
  };
  const onCloseModal = () => {
    if (runMetadataToEdit !== null && runMetadataToEdit !== void 0 && runMetadataToEdit.id) {
      const {
        notes = '',
        title = runMetadataToEdit.id
      } = runsMetadata[runMetadataToEdit.id] || {};
      setValuesToUpdate({
        notes,
        title
      });
    }
    setShowRunDetailsModal(false);
  };

  // only if the component is visible first, then apply isSuccessful to show or hide modal
  (0, _react.useEffect)(() => {
    if (visible && isSuccessful) {
      setShowRunDetailsModal(showModal);
    }
  }, [showModal, setShowRunDetailsModal, isSuccessful, visible]);
  (0, _react.useEffect)(() => {
    if (runMetadataToEdit !== null && runMetadataToEdit !== void 0 && runMetadataToEdit.id) {
      const {
        notes = '',
        title = runMetadataToEdit.id
      } = runsMetadata[runMetadataToEdit.id] || {};
      setValuesToUpdate({
        notes,
        title
      });
    }
  }, [runMetadataToEdit, runsMetadata]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-settings-modal pipeline-settings-modal--experiment-tracking"
  }, /*#__PURE__*/_react.default.createElement(_modal.default, {
    closeModal: onCloseModal,
    theme: theme,
    title: "Edit run details",
    visible: visible
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-settings-modal__content pipeline-settings-modal__content--short"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-settings-modal__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-settings-modal__name"
  }, "Run name")), /*#__PURE__*/_react.default.createElement(_input.default, {
    defaultValue: valuesToUpdate.title,
    onChange: value => onChange('title', value),
    resetValueTrigger: visible,
    type: "textarea",
    size: "large"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-settings-modal__content pipeline-settings-modal__content--short"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-settings-modal__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-settings-modal__name"
  }, "Notes")), /*#__PURE__*/_react.default.createElement(_input.default, {
    characterLimit: 500,
    defaultValue: valuesToUpdate.notes || '',
    onChange: value => onChange('notes', value),
    placeholder: "Add here",
    resetValueTrigger: visible,
    type: "textarea",
    size: "small"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "run-details-modal-button-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    mode: "secondary",
    onClick: onCloseModal,
    size: "small"
  }, "Cancel"), /*#__PURE__*/_react.default.createElement(_button.default, {
    dataTest: 'run-details-modal-apply-changes',
    disabled: hasNotInteracted,
    onClick: onApplyChanges,
    mode: isSuccessful ? 'success' : 'primary',
    size: "small"
  }, isSuccessful ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Changes applied ", /*#__PURE__*/_react.default.createElement("span", {
    className: "success-check-mark"
  }, "\u2705")) : 'Apply changes and close'))));
};
const mapStateToProps = state => ({
  runsMetadata: state.runsMetadata
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onUpdateRunTitle: (title, runId) => {
    dispatch((0, _actions.updateRunTitle)(title, runId));
  },
  onUpdateRunNotes: (notes, runId) => {
    dispatch((0, _actions.updateRunNotes)(notes, runId));
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(RunDetailsModal);