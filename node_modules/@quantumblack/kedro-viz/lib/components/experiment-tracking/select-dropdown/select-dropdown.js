"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _dropdown = _interopRequireDefault(require("../../ui/dropdown"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const CheckboxOption = _ref => {
  let {
    text,
    selectedValues,
    onChange
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("label", {
    className: "select-dropdown__checkbox"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "select-dropdown__checkbox-text",
    title: text
  }, text), /*#__PURE__*/_react.default.createElement("input", {
    checked: selectedValues && selectedValues.includes(text),
    id: text,
    onChange: () => onChange(text),
    type: "checkbox"
  }));
};
const SelectDropdown = _ref2 => {
  let {
    dropdownValues,
    onChange,
    selectedDropdownValues
  } = _ref2;
  const [selected, setSelected] = (0, _react.useState)(selectedDropdownValues);
  const [haveSelectedValues, setHaveSelectedValues] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    if (selectedDropdownValues) {
      setSelected(selectedDropdownValues);
    }
  }, [selectedDropdownValues]);
  const onSelectedHandler = (0, _react.useCallback)(value => {
    setHaveSelectedValues(true);
    if (selected.includes(value)) {
      setSelected(selected.filter(each => each !== value));
    } else {
      setSelected([...selected, value]);
    }
  }, [selected]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "select-dropdown"
  }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    onClosed: () => {
      setSelected(selectedDropdownValues);
      setHaveSelectedValues(false);
    },
    showCancelApplyBtns: true,
    onApplyAndClose: () => {
      onChange(selected);
      setHaveSelectedValues(false);
    },
    onCancel: () => {
      setSelected(selectedDropdownValues);
      setHaveSelectedValues(false);
    },
    haveSelectedValues: haveSelectedValues,
    defaultText: "Metrics ".concat(selected ? selected.length : 0, "/").concat(dropdownValues ? dropdownValues.length : 0),
    dataTest: 'experiments-metrics-select-dropdown'
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "select-dropdown__title"
  }, "Metrics"), dropdownValues && dropdownValues.map((text, i) => /*#__PURE__*/_react.default.createElement(CheckboxOption, {
    key: text + i,
    onChange: onSelectedHandler,
    selectedValues: selected,
    text: text
  }))));
};
var _default = exports.default = SelectDropdown;