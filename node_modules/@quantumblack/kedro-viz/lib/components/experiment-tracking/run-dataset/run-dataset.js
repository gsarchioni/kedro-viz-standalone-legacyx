"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _accordion = _interopRequireDefault(require("../accordion"));
var _pinArrow = _interopRequireDefault(require("../../icons/pin-arrow"));
var _plotlyChart = _interopRequireDefault(require("../../plotly-chart"));
var _experimentTrackingUtils = require("../../../utils/experiment-tracking-utils");
var _reactTransitionGroup = require("react-transition-group");
var _runDatasetLoader = require("./run-dataset-loader");
var _jsonObject = _interopRequireDefault(require("../../json-object"));
var _shortType = _interopRequireDefault(require("../../../utils/short-type"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const determinePinIcon = (data, pinValue, pinnedRun) => {
  if (data.runId !== pinnedRun && typeof data.value === 'number') {
    if (data.value > pinValue) {
      return 'upArrow';
    }
    if (data.value < pinValue) {
      return 'downArrow';
    }
  }
  return null;
};
const determinePinDelta = (data, pinValue, pinnedRun) => {
  if (data.runId !== pinnedRun && typeof data.value === 'number' && data.value !== pinValue) {
    const delta = data.value - pinValue;
    const deltaPercentage = Math.round(delta / Math.abs(pinValue) * 100);
    return delta.toFixed(1) + ' (' + deltaPercentage + '%)';
  }
  return null;
};
const resolveRunDataWithPin = (runData, pinnedRun) => {
  var _runData$filter$;
  const pinValue = (_runData$filter$ = runData.filter(data => data.runId === pinnedRun)[0]) === null || _runData$filter$ === void 0 ? void 0 : _runData$filter$.value;
  if (typeof pinValue === 'number') {
    return runData.map(data => ({
      pinIcon: determinePinIcon(data, pinValue, pinnedRun),
      pinDelta: determinePinDelta(data, pinValue, pinnedRun),
      ...data
    }));
  }
  return runData;
};

/**
 * Display the dataset of the experiment tracking run.
 * @param {String} props.activeTab The selected tab (Overview || Plots).
 * @param {Boolean} enableComparisonView Whether or not the enableComparisonView is on.
 * @param {Boolean} props.enableShowChanges Are changes enabled or not.
 * @param {Boolean} props.isSingleRun Indication to display a single run.
 * @param {String} props.pinnedRun ID of the pinned run.
 * @param {Boolean} props.showLoader Whether to show the loading component.
 * @param {Object} props.trackingData The experiment tracking run data.
 * @param {String} props.theme The currently-selected light or dark theme.
 */
const RunDataset = _ref => {
  let {
    activeTab,
    enableComparisonView,
    enableShowChanges,
    isSingleRun,
    pinnedRun,
    selectedRunIds,
    setRunDatasetToShow,
    setShowRunPlotsModal,
    showLoader,
    trackingData,
    theme
  } = _ref;
  const clonedTrackingData = (0, _react.useMemo)(() => structuredClone(trackingData), [trackingData]);
  if (!clonedTrackingData) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('details-dataset', {
      'details-dataset--not-overview': activeTab !== 'Overview'
    })
  }, Object.keys(clonedTrackingData).filter(group => {
    if (activeTab === 'Plots' && group === activeTab) {
      return true;
    }
    if (activeTab !== 'Plots' && group !== 'Plots') {
      return true;
    }
    return false;
  }).map(group => {
    return /*#__PURE__*/_react.default.createElement(_accordion.default, {
      className: (0, _classnames.default)('details-dataset__accordion', 'details-dataset__accordion-wrapper', {
        'details-dataset__accordion-wrapper-comparison-view': enableComparisonView
      }),
      heading: group,
      headingClassName: (0, _classnames.default)('details-dataset__accordion-header', {
        'details-dataset__accordion-header--hidden': group === 'Plots'
      }),
      key: group,
      layout: "left",
      size: "large"
    }, clonedTrackingData[group].length === 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: "details-dataset__row"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "details-dataset__name-header",
      style: {
        visibility: enableComparisonView ? 'hidden' : 'visible'
      }
    }, "No data to display. Try selecting a different run."), /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.TransitionGroup, {
      component: "div",
      className: "details-dataset__transition-group-wrapper"
    }, selectedRunIds.map((id, index) => {
      return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
        classNames: "details-dataset__value-animation",
        enter: isSingleRun ? false : true,
        exit: isSingleRun ? false : true,
        key: id,
        timeout: 300
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: (0, _classnames.default)('details-dataset__value-header', {
          'details-dataset__value-header--comparison-view': enableComparisonView && index === 0
        }),
        style: {
          display: enableComparisonView ? 'flex' : 'none'
        }
      }, "No data to display. Try selecting a different run."));
    }))), clonedTrackingData[group].map(dataset => {
      const {
        data,
        datasetType,
        datasetName,
        runIds
      } = dataset;
      return /*#__PURE__*/_react.default.createElement(_accordion.default, {
        className: "details-dataset__accordion",
        heading: datasetName,
        headingClassName: "details-dataset__accordion-header",
        isHyperlink: true,
        key: datasetName,
        layout: "left",
        linkTitle: "Show me where this dataset is located in the flowchart",
        size: "medium"
      }, Object.keys(data).sort((a, b) => {
        return a.localeCompare(b);
      }).map((key, rowIndex) => {
        const updatedDatasetValues = fillEmptyMetrics(dataset.data[key], runIds);
        const runDataWithPin = resolveRunDataWithPin(updatedDatasetValues, pinnedRun);
        return buildDatasetDataMarkup(key, runDataWithPin, datasetType, rowIndex, isSingleRun, enableComparisonView, enableShowChanges, setRunDatasetToShow, setShowRunPlotsModal, showLoader, theme);
      }));
    }));
  }));
};

/**
 * Build the necessary markup used to display the run dataset.
 * @param {String} datasetKey The row label of the data.
 * @param {Array} datasetValues A single dataset array from a run.
 * @param {Number} rowIndex The array index of the dataset data.
 * @param {Boolean} isSingleRun Whether or not this is a single run.
 * @param {Boolean} enableShowChanges Are changes enabled or not.
 * @param {Boolean} enableComparisonView Whether or not the enableComparisonView is on.
 * @param {Function} setRunDatasetToShow Callback function to show runDataset.
 * @param {Function} setShowRunPlotsModal Callback function to show RunPlot modal.
 */
function buildDatasetDataMarkup(datasetKey, datasetValues, datasetType, rowIndex, isSingleRun, enableComparisonView, enableShowChanges, setRunDatasetToShow, setShowRunPlotsModal, showLoader, theme) {
  const isPlotlyDataset = (0, _shortType.default)(datasetType) === 'plotly';
  const isImageDataset = (0, _shortType.default)(datasetType) === 'image';
  const isJSONTrackingDataset = (0, _shortType.default)(datasetType) === 'JSONTracking';
  const isMetricsTrackingDataset = (0, _shortType.default)(datasetType) === 'metricsTracking';
  const isTrackingDataset = isJSONTrackingDataset || isMetricsTrackingDataset;
  const onExpandVizClick = () => {
    setShowRunPlotsModal(true);
    setRunDatasetToShow({
      datasetKey,
      datasetType,
      datasetValues
    });
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
    key: datasetKey + rowIndex
  }, rowIndex === 0 ? /*#__PURE__*/_react.default.createElement("div", {
    className: "details-dataset__row"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "details-dataset__name-header"
  }, "Name"), /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.TransitionGroup, {
    component: "div",
    className: "details-dataset__transition-group-wrapper"
  }, datasetValues.map((data, index) => /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
    key: data.runId,
    timeout: 300,
    classNames: "details-dataset__value-animation",
    enter: isSingleRun ? false : true,
    exit: isSingleRun ? false : true
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('details-dataset__value-header', {
      'details-dataset__value-header--comparison-view': index === 0 && enableComparisonView
    })
  }, "Value")))), showLoader && /*#__PURE__*/_react.default.createElement(_runDatasetLoader.DatasetLoader, {
    length: datasetValues.length,
    theme: theme,
    x: 0,
    y: 12
  })) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: "details-dataset__row"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: 'details-dataset__label'
  }, datasetKey), /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.TransitionGroup, {
    component: "div",
    className: "details-dataset__transition-group-wrapper"
  }, datasetValues.map((run, index) => {
    const isSinglePinnedRun = datasetValues.length === 1;
    const isJSONObject = run.value && typeof run.value === 'object';
    return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
      key: run.runId,
      timeout: 300,
      classNames: "details-dataset__value-animation",
      enter: isSinglePinnedRun ? false : true,
      exit: isSinglePinnedRun ? false : true
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: (0, _classnames.default)('details-dataset__value', {
        'details-dataset__value--comparison-view': index === 0 && enableComparisonView
      })
    }, isTrackingDataset && !isJSONObject && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _experimentTrackingUtils.sanitizeValue)(run.value), enableShowChanges && /*#__PURE__*/_react.default.createElement(_pinArrow.default, {
      icon: run.pinIcon
    }), enableShowChanges && /*#__PURE__*/_react.default.createElement("span", {
      className: "details-dataset__deltaValue"
    }, run.pinDelta)), isJSONTrackingDataset && isJSONObject && /*#__PURE__*/_react.default.createElement(_jsonObject.default, {
      value: run.value,
      theme: theme,
      empty: "-",
      kind: "text"
    }), isPlotlyDataset && (run.value ? /*#__PURE__*/_react.default.createElement("div", {
      className: "details-dataset__visualization-wrapper",
      onClick: onExpandVizClick
    }, /*#__PURE__*/_react.default.createElement(_plotlyChart.default, {
      data: run.value.data,
      layout: run.value.layout,
      view: "experiment_preview"
    })) : fillEmptyPlots()), isImageDataset && (run.value ? /*#__PURE__*/_react.default.createElement("div", {
      className: "details-dataset__image-container",
      onClick: onExpandVizClick
    }, /*#__PURE__*/_react.default.createElement("img", {
      alt: "Matplotlib rendering",
      className: "details-dataset__image",
      src: "data:image/png;base64,".concat(run.value)
    })) : fillEmptyPlots())));
  })), showLoader && /*#__PURE__*/_react.default.createElement(_runDatasetLoader.DatasetLoader, {
    length: datasetValues.length,
    theme: theme,
    x: 0,
    y: 12
  })));
}

/**
 * Fill in missing run metrics if they don't match the number of runIds.
 * @param {Array} datasetValues Array of objects for a metric, e.g. r2_score.
 * @param {Array} runIds Array of strings of runIds.
 * @returns Array of objects, the length of which matches the length
 * of the runIds.
 */
function fillEmptyMetrics(datasetValues, runIds) {
  if (datasetValues.length === runIds.length) {
    return datasetValues;
  }
  const metrics = [];
  runIds.forEach(id => {
    const foundIdIndex = datasetValues.findIndex(item => {
      return item.runId === id;
    });

    // We didn't find a metric with this runId, so add a placeholder.
    if (foundIdIndex === -1) {
      metrics.push({
        runId: id,
        value: null
      });
    } else {
      metrics.push(datasetValues[foundIdIndex]);
    }
  });
  return metrics;
}
function fillEmptyPlots() {
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "details-dataset__empty-plot"
  }, "No plot available");
}
var _default = exports.default = RunDataset;