"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _timeSeries = require("../time-series/time-series.js");
var _parallelCoordinates = require("../parallel-coordinates/parallel-coordinates.js");
var _experimentWarning = _interopRequireDefault(require("../../experiment-warning"));
var _queries = require("../../../apollo/queries");
var _utils = require("../../../apollo/utils");
var _selectDropdown = _interopRequireDefault(require("../select-dropdown"));
var _helpers = require("../../../store/helpers");
var _config = require("../../../config");
var _objectUtils = require("../../../utils/object-utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const tabLabels = ['Time-series', 'Parallel coordinates'];
const getSelectedDataFromDropdown = (runMetricsData, localRunMetricsData, selectedMetrics) => {
  const metricsKeys = (runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data) && Object.keys(runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data.metrics);
  const originalMetricsData = (runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data) && (runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data.metrics);
  const originalRunsData = (runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data) && (runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data.runs);
  const toBeRemoved = {};
  metricsKeys.map((metric, index) => {
    if (selectedMetrics.indexOf(metric) === -1) {
      toBeRemoved[metric] = index;
    }
    return toBeRemoved;
  });
  const updatedMetrics = (0, _objectUtils.removeChildFromObject)(originalMetricsData, Object.keys(toBeRemoved));
  const updatedRuns = (0, _objectUtils.removeElementsFromObjectValues)(originalRunsData, Object.values(toBeRemoved));
  return {
    ...localRunMetricsData,
    metrics: updatedMetrics,
    runs: updatedRuns
  };
};
const MetricsPlots = _ref => {
  let {
    selectedRunIds,
    sidebarVisible
  } = _ref;
  const [activeTab, setActiveTab] = (0, _react.useState)(tabLabels[0]);
  const [chartHeight, setChartHeight] = (0, _react.useState)(0);
  const [parCoordsWidth, setParCoordsWidth] = (0, _react.useState)(0);
  const [timeSeriesWidth, setTimeSeriesWidth] = (0, _react.useState)(0);
  const [containerWidth, setContainerWidth] = (0, _react.useState)('auto');
  const [localRunMetricsData, setLocalRunMetricsData] = (0, _react.useState)({});
  const [selectedDropdownValues, setSelectedDropdownValues] = (0, _react.useState)(0);
  const {
    data: {
      runMetricsData = []
    } = []
  } = (0, _utils.useApolloQuery)(_queries.GET_METRIC_PLOT_DATA, {
    variables: {
      limit: _config.metricLimit
    }
  });
  const metrics = (runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data) && Object.keys(runMetricsData === null || runMetricsData === void 0 ? void 0 : runMetricsData.data.metrics);
  const numberOfMetrics = metrics ? metrics.length : 0;
  (0, _react.useEffect)(() => {
    if (runMetricsData !== null && runMetricsData !== void 0 && runMetricsData.data) {
      const selectMetricsValues = (0, _helpers.loadLocalStorage)(_config.localStorageMetricsSelect);
      // We want to check the localStorage everytime the component re-loads
      // if value stored in localStorage
      // we can update the localRunMetricsData with the selected values from localStorage
      if (Object.keys(selectMetricsValues).length > 0) {
        setSelectedDropdownValues(selectMetricsValues[0]);
        const updatedRunData = getSelectedDataFromDropdown(runMetricsData, localRunMetricsData, selectMetricsValues[0]);
        setLocalRunMetricsData(updatedRunData);
      }
      // If value doesn't exist in localStorage yet
      // then we need to create it first
      else {
        const metricsKeys = Object.keys(runMetricsData.data.metrics);
        setSelectedDropdownValues(metricsKeys);
        setLocalRunMetricsData(runMetricsData.data);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [runMetricsData]);
  const onSelectedDropdownChanged = selectedValues => {
    const updatedRunData = getSelectedDataFromDropdown(runMetricsData, localRunMetricsData, selectedValues);
    setLocalRunMetricsData(updatedRunData);
    (0, _helpers.saveLocalStorage)(_config.localStorageMetricsSelect, [selectedValues]);
    setSelectedDropdownValues(selectedValues);
  };
  (0, _react.useEffect)(() => {
    if (numberOfMetrics > 0) {
      if (numberOfMetrics > 5 && activeTab === tabLabels[1]) {
        setContainerWidth(numberOfMetrics * 200);
        setParCoordsWidth(numberOfMetrics * 200);
      } else {
        setContainerWidth('auto');
        setParCoordsWidth(document.querySelector('.metrics-plots-wrapper__charts').clientWidth);
      }
    }
  }, [activeTab, numberOfMetrics]);
  (0, _react.useEffect)(() => {
    setTimeSeriesWidth(document.querySelector('.metrics-plots-wrapper__charts').clientWidth);
    setChartHeight(document.querySelector('.metrics-plots-wrapper__charts').clientHeight);
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "metrics-plots-wrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "metrics-plots-wrapper__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "kedro chart-types-wrapper"
  }, tabLabels.map(tab => {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('chart-types-wrapper__tab', {
        'chart-types-wrapper__tab--active': activeTab === tab
      }),
      key: tab,
      onClick: () => setActiveTab(tab)
    }, tab);
  })), /*#__PURE__*/_react.default.createElement(_selectDropdown.default, {
    dropdownValues: metrics,
    onChange: onSelectedDropdownChanged,
    selectedDropdownValues: selectedDropdownValues
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "metrics-plots-wrapper__charts",
    style: {
      width: containerWidth
    }
  }, selectedDropdownValues.length === 0 && /*#__PURE__*/_react.default.createElement(_experimentWarning.default, {
    title: 'No data to display',
    subTitle: 'Select a metric to view a visualisation.'
  }), Object.keys(localRunMetricsData).length > 0 ? activeTab === tabLabels[0] ? /*#__PURE__*/_react.default.createElement(_timeSeries.TimeSeries, {
    chartWidth: timeSeriesWidth - 100,
    metricsData: localRunMetricsData,
    selectedRuns: selectedRunIds,
    sidebarVisible: sidebarVisible
  }) : /*#__PURE__*/_react.default.createElement(_parallelCoordinates.ParallelCoordinates, {
    chartHeight: chartHeight,
    chartWidth: parCoordsWidth,
    metricsData: localRunMetricsData,
    selectedRuns: selectedRunIds,
    sidebarVisible: sidebarVisible
  }) : null));
};
var _default = exports.default = MetricsPlots;