"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = exports.FlowchartPrimaryToolbar = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _actions = require("../../actions");
var _pipelines = require("../../actions/pipelines");
var _iconButton = _interopRequireDefault(require("../ui/icon-button"));
var _label = _interopRequireDefault(require("../icons/label"));
var _export = _interopRequireDefault(require("../icons/export"));
var _layers = _interopRequireDefault(require("../icons/layers"));
var _primaryToolbar = _interopRequireDefault(require("../primary-toolbar"));
var _disabled = require("../../selectors/disabled");
var _expandPipelines = _interopRequireDefault(require("../icons/expand-pipelines"));
var _collapsePipelines = _interopRequireDefault(require("../icons/collapse-pipelines"));
var _useGeneratePathname = require("../../utils/hooks/use-generate-pathname");
/**
 * Main controls for filtering the chart data
 * @param {Function} onToggleTextLabels Handle toggling text labels on/off
 * @param {Boolean} textLabels Whether text labels are displayed
 */
const FlowchartPrimaryToolbar = _ref => {
  let {
    disableLayerBtn,
    onToggleExportModal,
    onToggleLayers,
    onToggleSidebar,
    onToggleTextLabels,
    textLabels,
    visible,
    display,
    visibleLayers,
    expandedPipelines,
    onToggleExpandAllPipelines
  } = _ref;
  const {
    toSetQueryParam
  } = (0, _useGeneratePathname.useGeneratePathname)();
  const handleToggleExpandAllPipelines = () => {
    const isExpanded = !expandedPipelines;
    onToggleExpandAllPipelines(isExpanded);
    toSetQueryParam('expandAllPipelines', isExpanded.toString());
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_primaryToolbar.default, {
    onToggleSidebar: onToggleSidebar,
    visible: visible,
    dataTest: "sidebar-flowchart-visible-btn-".concat(visible.sidebar)
  }, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    active: textLabels,
    ariaLabel: "".concat(textLabels ? 'Hide' : 'Show', " text labels"),
    className: 'pipeline-menu-button--labels',
    dataTest: "sidebar-flowchart-labels-btn-".concat(textLabels),
    icon: _label.default,
    labelText: "".concat(textLabels ? 'Hide' : 'Show', " text labels"),
    onClick: () => onToggleTextLabels(!textLabels),
    visible: display.labelBtn
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    active: visibleLayers,
    ariaLabel: "Turn data layers ".concat(visibleLayers ? 'off' : 'on'),
    className: 'pipeline-menu-button--layers',
    dataTest: "sidebar-flowchart-layers-btn-".concat(visibleLayers),
    disabled: disableLayerBtn,
    icon: _layers.default,
    labelText: "".concat(visibleLayers ? 'Hide' : 'Show', " layers"),
    onClick: () => onToggleLayers(!visibleLayers),
    visible: display.layerBtn
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    active: expandedPipelines,
    ariaLabel: expandedPipelines ? 'Collapse all modular pipelines' : 'Expand all modular pipelines',
    className: 'pipeline-menu-button--pipeline',
    dataTest: "sidebar-flowchart-expand-pipeline-btn-".concat(expandedPipelines),
    icon: expandedPipelines ? _collapsePipelines.default : _expandPipelines.default,
    labelText: expandedPipelines ? 'Collapse pipelines' : 'Expand pipelines',
    onClick: handleToggleExpandAllPipelines,
    visible: display.expandPipelinesBtn
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: "Export graph as SVG or PNG",
    className: 'pipeline-menu-button--export',
    dataTest: 'sidebar-flowchart-export-btn',
    icon: _export.default,
    labelText: "Export visualisation",
    onClick: () => onToggleExportModal(true),
    visible: display.exportBtn
  })));
};
exports.FlowchartPrimaryToolbar = FlowchartPrimaryToolbar;
const mapStateToProps = state => ({
  disableLayerBtn: !state.layer.ids.length,
  textLabels: state.textLabels,
  visible: state.visible,
  display: state.display,
  visibleLayers: Boolean((0, _disabled.getVisibleLayerIDs)(state).length),
  expandedPipelines: state.expandAllPipelines
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onToggleExportModal: value => {
    dispatch((0, _actions.toggleExportModal)(value));
  },
  onToggleLayers: value => {
    dispatch((0, _actions.toggleLayers)(Boolean(value)));
  },
  onToggleSidebar: visible => {
    dispatch((0, _actions.toggleSidebar)(visible));
  },
  onToggleTextLabels: value => {
    dispatch((0, _actions.toggleTextLabels)(Boolean(value)));
  },
  onToggleExpandAllPipelines: isExpanded => {
    dispatch((0, _actions.toggleExpandAllPipelines)(isExpanded));
    dispatch((0, _pipelines.loadInitialPipelineData)());
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(FlowchartPrimaryToolbar);