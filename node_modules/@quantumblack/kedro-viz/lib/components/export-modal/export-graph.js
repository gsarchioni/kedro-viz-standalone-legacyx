"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _svgCrowbar = _interopRequireWildcard(require("svg-crowbar"));
var _config = require("../../config");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Handle onClick for the SVG/PNG download button
 * @param {String} format Must be 'svg' or 'png'
 * @param {String} theme light/dark theme
 * @param {Object} graphSize Graph width/height/margin
 * @param {Function} mockFn Mock testing function stand-in for svg-crowbar
 * @return {Function} onClick handler
 */
const exportGraph = _ref => {
  let {
    format,
    theme,
    graphSize,
    mockFn
  } = _ref;
  const downloadFormats = {
    png: _svgCrowbar.downloadPng,
    svg: _svgCrowbar.default
  };
  const download = mockFn || downloadFormats[format];

  // Create clone of graph SVG to avoid breaking the original
  const svg = document.querySelector('#pipeline-graph');
  const clone = svg.parentNode.appendChild(svg.cloneNode(true));
  clone.classList.add('kedro', "kui-theme--".concat(theme), 'pipeline-graph--export');

  // Reset zoom/translate
  let width, height;
  const hasGraph = isFinite(graphSize.width) && isFinite(graphSize.height);
  if (hasGraph) {
    width = graphSize.width + graphSize.marginx * 2;
    height = graphSize.height + graphSize.marginy * 2;
    clone.setAttribute('viewBox', "0 0 ".concat(width, " ").concat(height));
  }
  clone.querySelector('#zoom-wrapper').removeAttribute('transform');
  clone.querySelector('#zoom-wrapper').setAttribute('transform', "translate(".concat(_config.globalToolbarWidth, ", 0)"));

  // Impose a maximum size on PNGs because otherwise they break when downloading
  if (format === 'png') {
    const maxWidth = 5000;
    width = Math.min(width, maxWidth);
    height = Math.min(height, maxWidth * (height / width));
  }
  if (hasGraph) {
    clone.setAttribute('width', width);
    clone.setAttribute('height', height);
  }
  const style = document.createElement('style');
  if (format === 'svg') {
    // Add webfont
    style.innerHTML = '@import url(https://fonts.googleapis.com/css?family=Inter:400);';
  } else {
    // Add websafe fallback font
    style.innerHTML = ".kedro {\n      font-family: \"Trebuchet MS\", \"Lucida Grande\", \"Lucida Sans Unicode\", \"Lucida Sans\", Tahoma, sans-serif;\n      letter-spacing: -0.4px;\n    }";
  }
  clone.prepend(style);

  // Download SVG/PNG
  const options = format === 'svg' ? {
    css: 'internal'
  } : undefined;
  download(clone, 'kedro-pipeline', options);

  // Delete cloned SVG
  svg.parentNode.removeChild(clone);
};
var _default = exports.default = exportGraph;