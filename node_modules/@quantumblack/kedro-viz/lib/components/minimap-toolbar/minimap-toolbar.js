"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = exports.MiniMapToolbar = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _actions = require("../../actions");
var _layout = require("../../selectors/layout");
var _iconButton = _interopRequireDefault(require("../ui/icon-button"));
var _map = _interopRequireDefault(require("../icons/map"));
var _plus = _interopRequireDefault(require("../icons/plus"));
var _minus = _interopRequireDefault(require("../icons/minus"));
var _reset = _interopRequireDefault(require("../icons/reset"));
/**
 * Controls for minimap
 */
const MiniMapToolbar = _ref => {
  let {
    chartZoom,
    displayMiniMap,
    onToggleMiniMap,
    onUpdateChartZoom,
    visible,
    displayZoomToolbar
  } = _ref;
  const {
    scale,
    minScale,
    maxScale
  } = chartZoom;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("ul", {
    className: "pipeline-minimap-toolbar kedro"
  }, displayMiniMap && /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    active: visible.miniMap,
    ariaLabel: "Turn minimap ".concat(visible.miniMap ? 'off' : 'on'),
    className: 'pipeline-minimap-button pipeline-minimap-button--map',
    dataTest: "sidebar-minimap-btn-".concat(visible.miniMap),
    icon: _map.default,
    id: "minimap-toggle-icon",
    labelText: "".concat(visible.miniMap ? 'Hide' : 'Show', " minimap"),
    onClick: () => onToggleMiniMap(!visible.miniMap),
    visible: displayMiniMap
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'Zoom in',
    className: 'pipeline-minimap-button pipeline-minimap-button--zoom-in',
    dataTest: "sidebar-zoom-in-btn",
    disabled: scale >= maxScale,
    icon: _plus.default,
    labelText: 'Zoom in',
    onClick: () => onUpdateChartZoom(scaleZoom(chartZoom, 1.3)),
    visible: displayZoomToolbar
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'Zoom out',
    className: 'pipeline-minimap-button pipeline-minimap-button--zoom-out',
    dataTest: "sidebar-zoom-out-btn",
    disabled: scale <= minScale,
    icon: _minus.default,
    labelText: 'Zoom out',
    onClick: () => onUpdateChartZoom(scaleZoom(chartZoom, 0.7)),
    visible: displayZoomToolbar
  }), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'Reset zoom',
    className: 'pipeline-minimap-button pipeline-minimap-button--reset',
    dataTest: "sidebar-reset-zoom-btn",
    icon: _reset.default,
    labelText: 'Reset zoom',
    onClick: () => onUpdateChartZoom(scaleZoom(chartZoom, 0)),
    visible: displayZoomToolbar
  }), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("span", {
    className: "pipeline-minimap-toolbar__scale",
    title: "Zoom level"
  }, Math.round(100 * chartZoom.scale) || 100, "%"))));
};
exports.MiniMapToolbar = MiniMapToolbar;
const scaleZoom = (_ref2, factor) => {
  let {
    scale
  } = _ref2;
  return {
    scale: scale * (factor || 1),
    applied: false,
    transition: true,
    reset: factor === 0
  };
};
const mapStateToProps = state => ({
  visible: state.visible,
  displayMiniMap: state.display.miniMap,
  displayZoomToolbar: state.display.zoomToolbar,
  chartZoom: (0, _layout.getChartZoom)(state)
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onToggleMiniMap: value => {
    dispatch((0, _actions.toggleMiniMap)(value));
  },
  onUpdateChartZoom: transform => {
    dispatch((0, _actions.updateZoom)(transform));
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(MiniMapToolbar);