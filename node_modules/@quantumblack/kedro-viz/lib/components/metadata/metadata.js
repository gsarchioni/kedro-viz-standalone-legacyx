"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _modifiers = _interopRequireDefault(require("../../utils/modifiers"));
var _nodeIcon = _interopRequireDefault(require("../../components/icons/node-icon"));
var _iconButton = _interopRequireDefault(require("../../components/ui/icon-button"));
var _previewTable = _interopRequireDefault(require("../../components/preview-table"));
var _jsonObject = _interopRequireDefault(require("../../components/json-object"));
var _commandCopier = _interopRequireDefault(require("../ui/command-copier/command-copier"));
var _plotlyChart = _interopRequireDefault(require("../plotly-chart"));
var _close = _interopRequireDefault(require("../icons/close"));
var _expand = _interopRequireDefault(require("../icons/expand"));
var _metadataRow = _interopRequireDefault(require("./metadata-row"));
var _metadataUrl = _interopRequireDefault(require("./metadata-url"));
var _metadataCode = _interopRequireDefault(require("./metadata-code"));
var _toggle = _interopRequireDefault(require("../ui/toggle"));
var _metadata = require("../../selectors/metadata");
var _nodes = require("../../actions/nodes");
var _actions = require("../../actions");
var _shortType = _interopRequireDefault(require("../../utils/short-type"));
var _useGeneratePathname = require("../../utils/hooks/use-generate-pathname");
var _metadataStats = _interopRequireDefault(require("./metadata-stats"));
var _utils = require("../../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Shows node meta data
 */
const MetaData = _ref => {
  let {
    isPrettyName,
    metadata,
    onToggleCode,
    onToggleMetadataModal,
    onToggleNodeSelected,
    theme,
    visible = true,
    visibleCode
  } = _ref;
  const {
    toSelectedPipeline
  } = (0, _useGeneratePathname.useGeneratePathname)();
  const {
    toExperimentTrackingPath,
    toMetricsViewPath
  } = (0, _useGeneratePathname.useGeneratePathnameForExperimentTracking)();

  // Hide code panel when selected metadata changes
  (0, _react.useEffect)(() => onToggleCode(false), [metadata, onToggleCode]);
  // Hide plot modal when selected metadata changes
  (0, _react.useEffect)(() => onToggleMetadataModal(false), [metadata, onToggleMetadataModal]);
  const isTaskNode = (metadata === null || metadata === void 0 ? void 0 : metadata.type) === 'task';
  const isDataNode = (metadata === null || metadata === void 0 ? void 0 : metadata.type) === 'data';
  const isParametersNode = (metadata === null || metadata === void 0 ? void 0 : metadata.type) === 'parameters';
  const nodeTypeIcon = (0, _shortType.default)(metadata === null || metadata === void 0 ? void 0 : metadata.datasetType, metadata === null || metadata === void 0 ? void 0 : metadata.type);
  const hasPreview = metadata === null || metadata === void 0 ? void 0 : metadata.preview;
  const hasPlot = hasPreview && (metadata === null || metadata === void 0 ? void 0 : metadata.previewType) === 'PlotlyPreview';
  const hasImage = hasPreview && (metadata === null || metadata === void 0 ? void 0 : metadata.previewType) === 'ImagePreview';
  const hasTrackingData = hasPreview && ((metadata === null || metadata === void 0 ? void 0 : metadata.previewType) === 'MetricsTrackingPreview' || (metadata === null || metadata === void 0 ? void 0 : metadata.previewType) === 'JSONTrackingPreview');
  const hasTablePreview = hasPreview && (metadata === null || metadata === void 0 ? void 0 : metadata.previewType) === 'TablePreview';
  const isMetricsTrackingDataset = hasPreview && (metadata === null || metadata === void 0 ? void 0 : metadata.previewType) === 'MetricsTrackingPreview';
  const hasJSONPreview = hasPreview && (metadata === null || metadata === void 0 ? void 0 : metadata.previewType) === 'JSONPreview';
  const hasCode = Boolean(metadata === null || metadata === void 0 ? void 0 : metadata.code);
  const isTranscoded = Boolean(metadata === null || metadata === void 0 ? void 0 : metadata.originalType);
  const showCodePanel = visible && visibleCode && hasCode;
  const showCodeSwitch = hasCode;
  if (isMetricsTrackingDataset) {
    //rounding of tracking data
    Object.entries(metadata === null || metadata === void 0 ? void 0 : metadata.preview).forEach(_ref2 => {
      let [key, value] = _ref2;
      if (typeof value === 'number') {
        metadata.preview[key] = Math.round(value * 100) / 100;
      }
    });
  }
  let runCommand = metadata === null || metadata === void 0 ? void 0 : metadata.runCommand;
  if (!runCommand) {
    // provide a help text for user to know why the run command is not available for the task node
    runCommand = isTaskNode ? 'Please provide a name argument for this node in order to see a run command.' : null;
  }

  // translates the naming for the different types of nodes
  const translateMetadataType = metadataType => {
    if (metadataType === 'task') {
      return 'node';
    } else if (metadataType === 'data') {
      return 'dataset';
    }
    return metadataType;
  };
  const onCloseClick = () => {
    // Deselecting a node automatically hides MetaData panel
    onToggleNodeSelected(null);
    // and reset the URL to the current active pipeline
    toSelectedPipeline();
  };
  const onExpandMetaDataClick = () => {
    onToggleMetadataModal(true);
  };

  // Since we style the path right-to-left, remove the initial slash
  const removeInitialSlash = string => {
    return string === null || string === void 0 ? void 0 : string.replace(/^\//g, '');
  };
  const shortenDatasetType = value => {
    const isList = Array.isArray(value);
    return isList ? value.map(val => val.split('.').pop()) : value === null || value === void 0 ? void 0 : value.split('.').pop();
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_metadataCode.default, {
    visible: showCodePanel,
    value: metadata === null || metadata === void 0 ? void 0 : metadata.code
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _modifiers.default)('pipeline-metadata', {
      visible
    }, 'kedro')
  }, metadata && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__header-toolbox"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__header"
  }, /*#__PURE__*/_react.default.createElement(_nodeIcon.default, {
    className: "pipeline-metadata__icon",
    icon: nodeTypeIcon
  }), /*#__PURE__*/_react.default.createElement("h2", {
    className: "pipeline-metadata__title"
  }, metadata.name)), /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: "Close Metadata Panel",
    className: (0, _modifiers.default)('pipeline-metadata__close-button', {
      hasCode
    }),
    container: _react.default.Fragment,
    icon: _close.default,
    onClick: onCloseClick
  }), showCodeSwitch && /*#__PURE__*/_react.default.createElement(_toggle.default, {
    id: "code",
    dataTest: "metadata-code-toggle-".concat(visibleCode),
    checked: visibleCode,
    enabled: hasCode,
    title: "Show Code",
    onChange: event => {
      onToggleCode(event.target.checked);
    }
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__list"
  }, /*#__PURE__*/_react.default.createElement("dl", {
    className: "pipeline-metadata__properties"
  }, isPrettyName ? /*#__PURE__*/_react.default.createElement(_metadataRow.default, {
    label: "Procedure name:",
    value: metadata.fullName
  }) : /*#__PURE__*/_react.default.createElement(_metadataRow.default, {
    label: "Procedure name (pretty):",
    value: metadata.prettyName
  }), /*#__PURE__*/_react.default.createElement(_metadataRow.default, {
    label: "File Path:",
    kind: "path",
    value: removeInitialSlash(metadata.filepath)
  }), /*#__PURE__*/_react.default.createElement(_metadataRow.default, {
    label: "Overview:",
    value: metadata.overview
  }),  /*#__PURE__*/_react.default.createElement(_metadataUrl.default, {
    label: "Documentation:",
    value: "Read documentation",
    href: metadata.documentationURL,
  }), metadata.type === 'task' && /*#__PURE__*/_react.default.createElement(_metadataRow.default, {
    label: "Tags:",
    kind: "token",
    commas: false,
    value: metadata.tags
  }), isDataNode && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "pipeline-metadata__label",
    "data-label": "Dataset statistics:"
  }, "Dataset statistics:"), /*#__PURE__*/_react.default.createElement(_metadataStats.default, {
    stats: metadata === null || metadata === void 0 ? void 0 : metadata.stats
  }))), hasPlot && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__plot",
    onClick: onExpandMetaDataClick
  }, /*#__PURE__*/_react.default.createElement(_plotlyChart.default, {
    data: metadata === null || metadata === void 0 ? void 0 : metadata.preview.data,
    layout: metadata === null || metadata === void 0 ? void 0 : metadata.preview.layout,
    view: "preview"
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: "pipeline-metadata__link",
    onClick: onExpandMetaDataClick
  }, /*#__PURE__*/_react.default.createElement(_expand.default, {
    className: "pipeline-metadata__link-icon"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "pipeline-metadata__link-text"
  }, "Expand Plotly Visualization"))), hasImage && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__plot",
    onClick: onExpandMetaDataClick
  }, /*#__PURE__*/_react.default.createElement("img", {
    alt: "Matplotlib rendering",
    className: "pipeline-metadata__plot-image",
    src: "data:image/png;base64,".concat(metadata === null || metadata === void 0 ? void 0 : metadata.preview)
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: "pipeline-metadata__link",
    onClick: onExpandMetaDataClick
  }, /*#__PURE__*/_react.default.createElement(_expand.default, {
    className: "pipeline-metadata__link-icon"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "pipeline-metadata__link-text"
  }, "Expand Matplotlib Image"))), (0, _utils.isRunningLocally)() ? hasTrackingData && /*#__PURE__*/_react.default.createElement("button", {
    className: "pipeline-metadata__link",
    onClick: isMetricsTrackingDataset ? toMetricsViewPath : toExperimentTrackingPath
  }, /*#__PURE__*/_react.default.createElement(_expand.default, {
    className: "pipeline-metadata__link-icon"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "pipeline-metadata__link-text"
  }, "Open in Experiment Tracking")) : null, hasTablePreview && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__preview"
  }, /*#__PURE__*/_react.default.createElement(_previewTable.default, {
    data: metadata === null || metadata === void 0 ? void 0 : metadata.preview,
    size: "small",
    onClick: onExpandMetaDataClick
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__preview-shadow-box-right"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__preview-shadow-box-bottom"
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: "pipeline-metadata__link",
    onClick: onExpandMetaDataClick
  }, /*#__PURE__*/_react.default.createElement(_expand.default, {
    className: "pipeline-metadata__link-icon"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "pipeline-metadata__link-text"
  }, "Expand Preview Table"))), hasJSONPreview && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__preview-json"
  }, /*#__PURE__*/_react.default.createElement(_jsonObject.default, {
    value: JSON.parse(metadata.preview),
    theme: theme,
    style: {
      background: 'transparent',
      fontSize: '14px'
    },
    collapsed: 3
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__preview-shadow-box-right"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-metadata__preview-shadow-box-bottom"
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: "pipeline-metadata__link",
    onClick: onExpandMetaDataClick
  }, /*#__PURE__*/_react.default.createElement(_expand.default, {
    className: "pipeline-metadata__link-icon"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "pipeline-metadata__link-text"
  }, "Expand JSON View")))))));
};
const mapStateToProps = (state, ownProps) => ({
  isPrettyName: state.isPrettyName,
  metadata: (0, _metadata.getClickedNodeMetaData)(state),
  theme: state.theme,
  visible: (0, _metadata.getVisibleMetaSidebar)(state),
  visibleCode: state.visible.code,
  ...ownProps
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onToggleNodeSelected: nodeID => {
    dispatch((0, _nodes.toggleNodeClicked)(nodeID));
  },
  onToggleCode: visible => {
    dispatch((0, _actions.toggleCode)(visible));
  },
  onToggleMetadataModal: visible => {
    dispatch((0, _actions.togglePlotModal)(visible));
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(MetaData);