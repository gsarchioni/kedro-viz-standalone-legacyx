"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.default = exports.SearchList = void 0;
var _react = _interopRequireWildcard(require("react"));
var _searchBar = _interopRequireDefault(require("../ui/search-bar"));
var _reactRedux = require("react-redux");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * Handle Searching of List
 * @param {Function} onUpdateSearchValue Event handler
 * @param {String} searchValue Search text
 * @param {String} theme Light/dark theme for SearchBar component
 */
const SearchList = _ref => {
  let {
    onUpdateSearchValue,
    searchValue,
    theme
  } = _ref;
  const container = (0, _react.useRef)(null);

  /**
   * Focus search on CMD+F/CTRL+F, but only if not already focused, so that if
   * you hit the shortcut again you will receive the default browser behaviour
   * @param {Object} event Keydown event
   */
  const handleWindowKeyDown = event => {
    const isKeyF = event.key === 'f' || event.keyCode === 70;
    const isKeyCtrlOrCmd = event.ctrlKey || event.metaKey;
    if (isKeyF && isKeyCtrlOrCmd) {
      const input = container.current.querySelector('input');
      if (document.activeElement !== input) {
        input.focus();
        event.preventDefault();
      } else {
        input.blur();
      }
    }
  };

  /**
   * Add window keydown event listener on mount, and remove on unmount
   */
  (0, _react.useEffect)(() => {
    window.addEventListener('keydown', handleWindowKeyDown);
    return () => window.removeEventListener('keydown', handleWindowKeyDown);
  });

  /**
   * Listen for keyboard events, and trigger relevant actions
   * @param {Number} keyCode The key event keycode
   */
  const handleKeyDown = event => {
    const isKeyEscape = event.key === 'Escape' || event.keyCode === 27;
    if (isKeyEscape) {
      onUpdateSearchValue('');
      container.current.querySelector('input').blur();
    }
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-search-list",
    onKeyDown: handleKeyDown,
    ref: container
  }, /*#__PURE__*/_react.default.createElement(_searchBar.default, {
    onChange: onUpdateSearchValue,
    placeholder: 'Search',
    theme: theme,
    value: searchValue
  }));
};
exports.SearchList = SearchList;
const mapStateToProps = state => ({
  theme: state.theme
});
exports.mapStateToProps = mapStateToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps)(SearchList);