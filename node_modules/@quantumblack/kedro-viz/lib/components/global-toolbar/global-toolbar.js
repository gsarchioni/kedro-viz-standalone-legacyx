"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = exports.GlobalToolbar = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../actions");
var _utils = require("../../utils");
var _download = _interopRequireDefault(require("../icons/download"));
var _experiments = _interopRequireDefault(require("../icons/experiments"));
var _iconButton = _interopRequireDefault(require("../ui/icon-button"));
var _logo = _interopRequireDefault(require("../icons/logo"));
var _settings = _interopRequireDefault(require("../icons/settings"));
var _theme = _interopRequireDefault(require("../icons/theme"));
var _tree = _interopRequireDefault(require("../icons/tree"));
/**
 * Main controls for filtering the chart data
 * @param {Function} onToggleTheme Handle toggling theme between light/dark
 * @param {String} theme Kedro UI light/dark theme
 */
const GlobalToolbar = _ref => {
  let {
    isOutdated,
    onToggleSettingsModal,
    onToggleShareableUrlModal,
    onToggleTheme,
    theme
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-global-toolbar"
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "pipeline-global-routes-toolbar kedro"
  }, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'Kedro Viz logo and link',
    className: 'pipeline-menu-button--logo pipeline-menu-button--large',
    dataTest: 'global-toolbar-kedro-icon',
    disabled: false,
    icon: _logo.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.NavLink, {
    exact: true,
    to: {
      pathname: (0, _utils.sanitizedPathname)()
    }
  }, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'View your pipeline',
    dataTest: 'global-toolbar-flowchart-btn',
    className: 'pipeline-menu-button--large pipeline-menu-button--link',
    disabled: false,
    icon: _tree.default,
    labelText: "Flowchart"
  })), (0, _utils.isRunningLocally)() ? /*#__PURE__*/_react.default.createElement(_reactRouterDom.NavLink, {
    exact: true,
    id: "experiment-tracking-nav-button",
    to: {
      pathname: "".concat((0, _utils.sanitizedPathname)(), "experiment-tracking")
    }
  }, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'View your experiments',
    className: 'pipeline-menu-button--large pipeline-menu-button--link',
    dataTest: 'global-toolbar-experiments-btn',
    disabled: false,
    icon: _experiments.default,
    labelText: "Experiment tracking"
  })) : null), /*#__PURE__*/_react.default.createElement("ul", {
    className: "pipeline-global-control-toolbar kedro"
  }, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: "Change to ".concat(theme === 'light' ? 'dark' : 'light', " theme"),
    ariaLive: "polite",
    dataTest: "global-toolbar-theme-btn-".concat(theme),
    className: 'pipeline-menu-button--theme pipeline-menu-button--large',
    icon: _theme.default,
    labelText: "Toggle theme",
    onClick: () => onToggleTheme(theme === 'light' ? 'dark' : 'light')
  }), (0, _utils.isRunningLocally)() ? /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'Publish and share',
    className: 'pipeline-menu-button--deploy pipeline-menu-button--large',
    dataTest: 'global-toolbar-deploy-btn',
    disabled: false,
    icon: _download.default,
    labelText: 'Publish and share',
    onClick: () => onToggleShareableUrlModal(true)
  }) : null, /*#__PURE__*/_react.default.createElement(_iconButton.default, {
    ariaLabel: 'Change the settings flags',
    className: 'pipeline-menu-button--settings pipeline-menu-button--large',
    dataTest: 'global-toolbar-settings-btn',
    disabled: false,
    icon: _settings.default,
    labelText: 'Settings',
    onClick: () => onToggleSettingsModal(true)
  }, isOutdated && /*#__PURE__*/_react.default.createElement("span", {
    className: "update-reminder-dot"
  })))));
};
exports.GlobalToolbar = GlobalToolbar;
const mapStateToProps = state => ({
  theme: state.theme,
  visible: state.visible
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onToggleSettingsModal: value => {
    dispatch((0, _actions.toggleSettingsModal)(value));
  },
  onToggleShareableUrlModal: value => {
    dispatch((0, _actions.toggleShareableUrlModal)(value));
  },
  onToggleTheme: value => {
    dispatch((0, _actions.toggleTheme)(value));
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(GlobalToolbar);