"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _factory = _interopRequireDefault(require("react-plotly.js/factory"));
var _plotly = _interopRequireDefault(require("plotly.js-dist-min"));
var _deepmerge = _interopRequireDefault(require("deepmerge"));
var _reactRedux = require("react-redux");
var _dark = require("../../utils/plot-templates/dark");
var _light = require("../../utils/plot-templates/light");
var _classnames = _interopRequireDefault(require("classnames"));
/**
 * Display plotly chart
 * @param {Object} chartSize Chart dimensions in pixels
 * @param {Object} targetRect event.target.getBoundingClientRect()
 * @param {Boolean} visible Whether to show the tooltip
 * @param {String} text Tooltip display label
 */

const Plot = (0, _factory.default)(_plotly.default);
const PlotlyChart = _ref => {
  let {
    theme,
    view = '',
    data = [],
    layout = {}
  } = _ref;
  const plotConfig = view.includes('preview') ? {
    staticPlot: true
  } : undefined;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('pipeline-plotly-chart', "pipeline-plotly__".concat(view))
  }, /*#__PURE__*/_react.default.createElement(Plot, {
    data: data,
    layout: updateLayout(theme, view, layout),
    config: plotConfig,
    style: {
      width: '100%',
      height: '100%'
    },
    useResizeHandler: true
  }));
};
const updateLayout = (theme, view, layout) => {
  if (theme === 'dark') {
    if (view === 'experiment_preview') {
      return (0, _deepmerge.default)(layout, _dark.darkExpPreviewTemplate);
    } else if (view === 'preview') {
      return (0, _deepmerge.default)(layout, _dark.darkPreviewTemplate);
    } else if (view === 'twoCharts') {
      return (0, _deepmerge.default)(layout, _dark.darkTwoChartsTemplate);
    } else if (view === 'threeCharts') {
      return (0, _deepmerge.default)(layout, _dark.darkThreeChartsTemplate);
    } else {
      return (0, _deepmerge.default)(layout, _dark.darkOneChartTemplate);
    }
  } else {
    if (view === 'experiment_preview') {
      return (0, _deepmerge.default)(layout, _light.lightExpPreviewTemplate);
    } else if (view === 'preview') {
      return (0, _deepmerge.default)(layout, _light.lightPreviewTemplate);
    } else if (view === 'twoCharts') {
      return (0, _deepmerge.default)(layout, _light.lightTwoChartsTemplate);
    } else if (view === 'threeCharts') {
      return (0, _deepmerge.default)(layout, _light.lightThreeChartsTemplate);
    } else {
      return (0, _deepmerge.default)(layout, _light.lightOneChartTemplate);
    }
  }
};
const mapStateToProps = state => ({
  theme: state.theme
});
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps)(PlotlyChart);