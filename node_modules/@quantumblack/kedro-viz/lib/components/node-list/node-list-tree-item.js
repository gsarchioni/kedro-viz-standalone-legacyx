"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _ExpandMore = _interopRequireDefault(require("@mui/icons-material/ExpandMore"));
var _ChevronRight = _interopRequireDefault(require("@mui/icons-material/ChevronRight"));
var _xTreeView = require("@mui/x-tree-view");
var _nodeListRow = _interopRequireDefault(require("./node-list-row"));
const arrowIconColor = '#8e8e90';
const NodeListTreeItem = _ref => {
  let {
    data,
    onItemClick,
    onItemMouseEnter,
    onItemMouseLeave,
    onItemChange,
    children
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_xTreeView.TreeItem, {
    className: "pipeline-treeItem__root--overwrite",
    key: data.id,
    nodeId: data.id
    // this setup is to allow flexibility for adjusting the setting for individual arrow icons
    ,
    collapseIcon: /*#__PURE__*/_react.default.createElement(_ExpandMore.default, {
      style: {
        color: arrowIconColor
      }
    }),
    expandIcon: /*#__PURE__*/_react.default.createElement(_ChevronRight.default, {
      style: {
        color: arrowIconColor
      }
    }),
    label: /*#__PURE__*/_react.default.createElement(_nodeListRow.default, {
      container: "div",
      key: data.id,
      id: data.id,
      kind: "element",
      label: data.highlightedLabel || data.name,
      name: data.name,
      icon: data.icon,
      type: data.type,
      active: data.active,
      checked: data.checked,
      disabled: data.disabled,
      faded: data.faded,
      visible: data.visible,
      selected: data.selected,
      allUnchecked: true,
      visibleIcon: data.visibleIcon,
      invisibleIcon: data.invisibleIcon,
      focusModeIcon: data.focusModeIcon,
      onClick: () => onItemClick(data),
      onMouseEnter: () => onItemMouseEnter(data),
      onMouseLeave: () => onItemMouseLeave(data),
      onChange: e => onItemChange(data, !e.target.checked, e.target.dataset.iconType),
      rowType: "tree",
      focused: data.focused
    })
  }, children);
};
var _default = exports.default = NodeListTreeItem;