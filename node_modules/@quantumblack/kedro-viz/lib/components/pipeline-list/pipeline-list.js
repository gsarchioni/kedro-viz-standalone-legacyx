"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapStateToProps = exports.mapDispatchToProps = exports.default = exports.PipelineList = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _dropdown = _interopRequireDefault(require("../ui/dropdown"));
var _menuOption = _interopRequireDefault(require("../ui/menu-option"));
var _pipelines = require("../../actions/pipelines");
var _actions = require("../../actions");
var _useGeneratePathname = require("../../utils/hooks/use-generate-pathname");
/**
 * A Dropdown displaying a list of selectable pipelines
 * @param {Object} pipeline Pipeline IDs, names, and active pipeline
 * @param {Function} onUpdateActivePipeline Handle updating the active pipeline
 * @param {Function} onToggleOpen Callback when opening/closing the dropdown
 */
const PipelineList = _ref => {
  let {
    asyncDataSource,
    onUpdateActivePipeline,
    pipeline,
    isPrettyName,
    onToggleOpen
  } = _ref;
  const {
    toSelectedPipeline
  } = (0, _useGeneratePathname.useGeneratePathname)();
  if (!pipeline.ids.length && !asyncDataSource) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-list"
  }, /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    disabled: !pipeline.ids.length,
    onOpened: () => onToggleOpen(true),
    onClosed: () => onToggleOpen(false),
    width: null,
    dataTest: 'kedro-pipeline-selector',
    onChanged: selectedPipeline => {
      onUpdateActivePipeline(selectedPipeline);
      // Reset the URL to the current active pipeline when switching between different view
      toSelectedPipeline(selectedPipeline.value);
    },
    defaultText: isPrettyName ? pipeline.name[pipeline.active] : pipeline.active || 'Default'
  }, pipeline.ids.map(id => /*#__PURE__*/_react.default.createElement(_menuOption.default, {
    key: "pipeline-".concat(id),
    className: (0, _classnames.default)({
      'pipeline-list__option--active': pipeline.active === id
    }),
    value: id,
    primaryText: isPrettyName ? pipeline.name[id] : id
  }))));
};
exports.PipelineList = PipelineList;
const mapStateToProps = state => ({
  asyncDataSource: state.dataSource === 'json',
  pipeline: state.pipeline,
  isPrettyName: state.isPrettyName
});
exports.mapStateToProps = mapStateToProps;
const mapDispatchToProps = dispatch => ({
  onUpdateActivePipeline: event => {
    dispatch((0, _pipelines.loadPipelineData)(event.value));
    dispatch((0, _actions.toggleFocusMode)(null));
  }
});
exports.mapDispatchToProps = mapDispatchToProps;
var _default = exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PipelineList);