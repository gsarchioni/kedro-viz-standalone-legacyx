"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertZeroWidthSpace = exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
const zeroWidthSpace = String.fromCharCode(0x200b);

/**
 * Force tooltip text to break on special characters
 * @param {String} text Any text with special characters
 * @return {String} text
 */
const insertZeroWidthSpace = text => text.replace(/([^\w\s]|[_])/g, "".concat(zeroWidthSpace, "$1").concat(zeroWidthSpace));

/**
 * Display flowchart node tooltip
 * @param {string}  arrowSize Tooltip arrow size regular | small
 * @param {boolean}  centerArrow Where to center tooltip arrow or not
 * @param {Object} chartSize Chart dimensions in pixels
 * @param {boolean}  noDelay Where to show the tooltip immediately or after 1 sec delay
 * @param {Object}  style Tooltip custom css
 * @param {Object} targetRect event.target.getBoundingClientRect()
 * @param {String} text Tooltip display label
 * @param {Boolean} visible Whether to show the tooltip
 */
exports.insertZeroWidthSpace = insertZeroWidthSpace;
const Tooltip = _ref => {
  let {
    arrowSize = 'regular',
    centerArrow = false,
    chartSize = {},
    noDelay = false,
    style = {},
    targetRect = {},
    text = '',
    visible = false
  } = _ref;
  let isTop = false,
    isRight = false;
  const isFlowchartTooltip = chartSize && Object.keys(chartSize).length;
  const styles = {
    ...style
  };
  if (isFlowchartTooltip) {
    let x = 0,
      y = 0;
    const {
      left,
      top,
      width,
      height,
      outerWidth,
      sidebarWidth
    } = chartSize;
    isRight = targetRect.left - sidebarWidth > width / 2;
    isTop = targetRect.top < height / 2;
    const xOffset = isRight ? targetRect.left - outerWidth : targetRect.left;
    const yOffset = isTop ? targetRect.top + targetRect.height : targetRect.top;
    x = xOffset - left + targetRect.width / 2;
    y = yOffset - top;
    styles.transform = "translate(".concat(x, "px, ").concat(y, "px)");
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('pipeline-tooltip', {
      'pipeline-tooltip--visible': visible,
      'pipeline-tooltip--right': isRight,
      'pipeline-tooltip--top': isTop,
      'pipeline-tooltip--chart': isFlowchartTooltip,
      'pipeline-tooltip--no-delay': noDelay,
      'pipeline-tooltip--center-arrow': centerArrow,
      'pipeline-tooltip--small-arrow': arrowSize === 'small'
    }),
    style: styles
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "pipeline-tooltip__text"
  }, insertZeroWidthSpace(text)));
};
var _default = exports.default = Tooltip;