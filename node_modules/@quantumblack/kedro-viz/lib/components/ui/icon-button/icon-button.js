"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const labelPositionTypes = ['right', 'left', 'bottom', 'top'];

/**
 * Icon button component
 */
const IconButton = _ref => {
  let {
    active = false,
    ariaLabel,
    ariaLive,
    children,
    className,
    container = 'li',
    dataTest = 'test-default-btn',
    disabled = false,
    icon,
    labelText,
    labelTextPosition = 'right',
    onClick,
    visible = true,
    ...rest
  } = _ref;
  const Icon = icon;
  let inTimeout;
  const [isTooltipVisible, setIsTooltipVisible] = (0, _react.useState)(false);
  const labelPosition = labelPositionTypes.includes(labelTextPosition.toLowerCase()) ? labelTextPosition.toLocaleLowerCase() : 'right';
  const showTooltip = () => {
    inTimeout = setTimeout(() => {
      window.localStorage.setItem('kedro-viz-tooltip-show', true);
      setIsTooltipVisible(true);
    }, 333);
  };
  const hideTooltip = () => {
    clearTimeout(inTimeout);
    setIsTooltipVisible(false);
  };
  return visible ? /*#__PURE__*/_react.default.createElement(Wrapper, (0, _extends2.default)({
    container: container
  }, rest), /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": ariaLabel,
    "aria-live": ariaLive,
    className: (0, _classnames.default)(className, {
      'pipeline-icon-toolbar__button': true,
      'pipeline-icon-toolbar__button--active': active
    }),
    "data-test": dataTest,
    disabled: disabled,
    onClick: onClick,
    onMouseEnter: showTooltip,
    onMouseLeave: hideTooltip
  }, Icon && /*#__PURE__*/_react.default.createElement(Icon, {
    className: "pipeline-icon"
  }), labelText && /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('pipeline-toolbar__label', {
      'pipeline-toolbar__label__visible': isTooltipVisible
    }, "pipeline-toolbar__label-".concat(labelPosition))
  }, labelText)), children) : null;
};
const Wrapper = _ref2 => {
  let {
    children,
    container: Container = 'li',
    ...rest
  } = _ref2;
  if (typeof Container === 'symbol') {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
  } else {
    return /*#__PURE__*/_react.default.createElement(Container, (0, _extends2.default)({
      className: "pipeline-icon--container"
    }, rest), children);
  }
};
IconButton.propTypes = {
  active: _propTypes.default.bool,
  ariaLabel: _propTypes.default.string,
  ariaLive: _propTypes.default.string,
  children: _propTypes.default.node,
  dataTest: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  icon: _propTypes.default.func,
  labelText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  // it takes a string or a JSX element
  onClick: _propTypes.default.func,
  visible: _propTypes.default.bool
};
var _default = exports.default = IconButton;