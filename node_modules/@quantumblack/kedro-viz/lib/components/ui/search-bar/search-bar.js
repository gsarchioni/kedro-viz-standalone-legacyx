"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _searchBarRenderer = _interopRequireDefault(require("./search-bar-renderer"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const SearchBar = _ref => {
  let {
    children,
    onBlur,
    onChange,
    onClear,
    onFocus,
    onSubmit,
    placeholder = 'Search Here...',
    theme = 'dark',
    value: inputValue
  } = _ref;
  const [value, setValue] = (0, _react.useState)(inputValue);
  const [isFocused, setIsFocused] = (0, _react.useState)(false);
  const [showClearButton, setShowClearButton] = (0, _react.useState)(inputValue !== '');
  (0, _react.useEffect)(() => {
    setValue(inputValue);
    setShowClearButton(inputValue !== '');
  }, [inputValue]);

  /**
   * onChange - fired for onChange events in input field
   * @param  {Event} e native change event
   */
  const _handleChanged = e => {
    setValue(e.target.value);
    setShowClearButton(e.target.value !== '');

    // trigger onChange prop if available
    if (typeof onChange === 'function') {
      onChange(e.target.value);
    }
  };

  /**
   * onFocus - fired for onFocus events in input field
   * @param  {Event} e native change event
   */
  const _handleFocused = e => {
    setIsFocused(true);

    // trigger onFocus prop if available
    if (typeof onFocus === 'function') {
      onFocus(e.target.value);
    }
  };

  /**
   * onBlurred - fired for onBlur events in input field
   * @param  {Event} e native change event
   */
  const _handleBlurred = e => {
    setIsFocused(false);

    // trigger onBlur prop if available
    if (typeof onBlur === 'function') {
      onBlur(e.target.value);
    }
  };

  /**
   * onClose - clear the text in the input
   */
  const _handleCleared = event => {
    setValue('');
    setShowClearButton(false);

    // trigger onClear prop if available
    if (typeof onClear === 'function') {
      onClear();
    }

    // trigger onChange prop if available
    if (typeof onChange === 'function') {
      onChange('');
    }
    event.preventDefault();
  };

  /**
   * Trigger onSubmit prop if available
   * @param {Object} e native change event
   */
  const _handleSubmit = e => {
    if (typeof onSubmit === 'function') {
      onSubmit({
        e,
        data: value
      });
    }
  };
  return /*#__PURE__*/_react.default.createElement(_searchBarRenderer.default, {
    onBlur: _handleBlurred,
    isFocused: isFocused,
    placeholder: placeholder,
    onChange: _handleChanged,
    onClear: _handleCleared,
    onFocus: _handleFocused,
    onSubmit: _handleSubmit,
    showClearButton: showClearButton,
    value: value,
    theme: theme
  }, children);
};
SearchBar.propTypes = {
  /**
   * Child component, usually search-bar-results
   */
  children: _propTypes.default.node,
  /**
   * On blur method, triggered by clicking outside the input
   */
  onBlur: _propTypes.default.func,
  /**
   * Subscribe to change events from input field
   */
  onChange: _propTypes.default.func,
  /**
   * On clear, triggered when clear button is pressed
   */
  onClear: _propTypes.default.func,
  /**
   * On focus method, triggered by clicking into the input
   */
  onFocus: _propTypes.default.func,
  /**
   * On submit method, triggered by hitting enter on the input
   */
  onSubmit: _propTypes.default.func,
  /**
   * Place holder text for search input
   */
  placeholder: _propTypes.default.string,
  /**
   * Theme of the component
   */
  theme: _propTypes.default.oneOf(['light', 'dark']).isRequired,
  /**
   * Value of the inner input bar
   */
  value: _propTypes.default.string
};
var _default = exports.default = SearchBar;