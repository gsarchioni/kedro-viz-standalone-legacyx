"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
require("what-input");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const SearchInput = _ref => {
  let {
    disabled = false,
    label,
    onBlur,
    onChange,
    onFocus,
    placeholder,
    theme = 'light',
    value: inputValue
  } = _ref;
  const [focused, setFocused] = (0, _react.useState)(false);
  const [value, setValue] = (0, _react.useState)(inputValue);
  (0, _react.useEffect)(() => {
    if (inputValue !== null) {
      setValue(inputValue);
    }
  }, [inputValue]);
  const _handleFocused = event => {
    setFocused(true);
    if (typeof onFocus === 'function') {
      onFocus(event, {
        focused: true
      });
    }
  };

  /**
   * _handleBlurred - changes the focus to disabled state.
   */
  const _handleBlurred = event => {
    setFocused(false);
    if (typeof onBlur === 'function') {
      onBlur(event, {
        focused: false,
        value: event.target.value
      });
    }
  };

  /**
   * _handleChanged - updates the state with the value from the input and triggers the passed on change callback.
   * @param  {Object} event
   */
  const _handleChanged = event => {
    setValue(event.target.value);
    if (typeof onChange === 'function') {
      onChange(event, {
        value: event.target.value
      });
    }
  };
  const labelWrapper = label && /*#__PURE__*/_react.default.createElement("div", {
    className: "search-input__label"
  }, label);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "kedro search-input-wrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('search-input', "search-theme--".concat(theme), {
      'search-input--disabled': disabled
    }, {
      'search-input--focused': focused
    }),
    onFocus: _handleFocused,
    onBlur: _handleBlurred
  }, labelWrapper, /*#__PURE__*/_react.default.createElement("input", {
    className: "search-input__field",
    disabled: disabled,
    onBlur: _handleBlurred,
    onChange: _handleChanged,
    onFocus: _handleFocused,
    placeholder: placeholder || '',
    type: "text",
    value: value || ''
  }), /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": "true",
    className: "search-input__line",
    "data-value": value || ''
  })));
};
SearchInput.propTypes = {
  /**
   * Whether the input should be editable or not.
   */
  disabled: _propTypes.default.bool,
  /**
   * Label indicating what should be written in the input.
   */
  label: _propTypes.default.string,
  /**
   * Event listener which will be triggered on losing focus of the input (in other words, on blur).
   */
  onBlur: _propTypes.default.func,
  /**
   * Event listener which will be triggered when input will gain focus,
   */
  onFocus: _propTypes.default.func,
  /**
   * Event listener which will be trigerred on change of the input.
   */
  onChange: _propTypes.default.func,
  /**
   * Placeholder hint text which is displayed inside the input field and dissapers when something is written inside.
   */
  placeholder: _propTypes.default.string,
  /**
   * Theme of the input - either 'dark' or 'light'.
   */
  theme: _propTypes.default.oneOf(['dark', 'light']),
  /**
   * Value to be displayed inside the input field, it is editable and can change if not disabled.
   */
  value: _propTypes.default.string
};
var _default = exports.default = SearchInput;