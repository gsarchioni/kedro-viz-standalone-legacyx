"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _keyEvents = _interopRequireDefault(require("../../../utils/key-events"));
/**
 * Generic Kedro Menu Option
 */
const MenuOption = _ref => {
  let {
    className,
    focused = false,
    id,
    onSelected,
    primaryText,
    selected = false,
    value
  } = _ref;
  const wrapperClasses = (0, _classnames.default)('kedro', 'menu-option', className, {
    'menu-option--focused': focused,
    'menu-option--selected': selected
  });

  /**
   * Event handler executed when the option is selected
   * @param  {Object} e The event object
   * @return {Function}   The event handler
   */
  const _handleClicked = e => onSelected({
    event: e,
    id,
    label: primaryText,
    value
  });

  /**
   * Event handler executed when key events are triggered on the focused option
   * @param {Object} e - The key event object
   */
  const _handleKeyDown = e => (0, _keyEvents.default)(e.keyCode)('enter, space', () => {
    _handleClicked(e);
    // Prevent the page from scrolling when selecting an item:
    e.preventDefault();
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-selected": selected.toString(),
    className: wrapperClasses,
    onClick: _handleClicked,
    onKeyDown: _handleKeyDown,
    role: "option",
    tabIndex: "-1"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "menu-option__content",
    title: primaryText
  }, /*#__PURE__*/_react.default.createElement("span", null, primaryText)));
};
MenuOption.propTypes = {
  /**
   * Container class
   */
  className: _propTypes.default.string,
  /**
   * Whether the option is focused
   */
  focused: _propTypes.default.bool,
  /**
   * A unique key for this element, which will be set by the parent menu component.
   * This is used by the parent menu component to determine which option is selected.
   */
  id: _propTypes.default.string,
  /**
   * A callback which is automatically implemented by a parent menu component
   */
  onSelected: _propTypes.default.func,
  /**
   * The main label displayed
   */
  primaryText: _propTypes.default.string.isRequired,
  /**
   * Whether the option is selected
   */
  selected: _propTypes.default.bool,
  /**
   * The value to send to the parent menu component when this item is selected
   */
  value: _propTypes.default.any
};
var _default = exports.default = MenuOption;