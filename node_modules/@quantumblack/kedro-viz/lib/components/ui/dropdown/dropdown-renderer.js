"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _keyEvents = _interopRequireDefault(require("../../../utils/key-events"));
var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));
var _dropdownArrow = _interopRequireDefault(require("../../icons/dropdown-arrow"));
var _button = _interopRequireDefault(require("../button"));
/**
 * Renderer for the Dropdown component
 */
const DropdownRenderer = _ref => {
  let {
    children,
    defaultText = 'Please select...',
    disabled = false,
    focusedOption,
    handleRef,
    haveSelectedValues = false,
    onApplyAndClose,
    onCancel,
    onLabelClicked,
    onOptionSelected,
    onSelectChanged,
    open = false,
    selectedOption,
    showCancelApplyBtns,
    title,
    width = 160,
    placeholderText,
    dataTest
  } = _ref;
  const wrapperClasses = (0, _classnames.default)('kedro', 'dropdown', {
    'dropdown--open': open,
    'dropdown--disabled': disabled
  });
  let optionIndex = 0;

  /**
   * Clone a React element and extend with extra props tieing it to a new scope
   */
  const _extendMenuOption = (element, id, index) => {
    const extraProps = {
      id,
      onSelected: onOptionSelected,
      focused: focusedOption === index,
      selected: selectedOption.id === id || !selectedOption.id && element.props.selected
    };
    optionIndex += 1;
    return /*#__PURE__*/_react.default.cloneElement(element, extraProps);
  };

  /**
   * Handle keyboard events
   * @param {Object} e - The key event object
   */
  const _handleKeyDown = e => {
    if (open) {
      (0, _keyEvents.default)(e.keyCode, {
        escape: onLabelClicked,
        up: onSelectChanged.bind(void 0, -1),
        down: onSelectChanged.bind(void 0, 1)
      });
    } else {
      (0, _keyEvents.default)(e.keyCode, {
        up: onLabelClicked,
        down: onLabelClicked
      });
    }
    // Prevent the page from scrolling etc when using the dropdown:
    (0, _keyEvents.default)(e.keyCode)('escape, up, down', () => e.preventDefault());
  };
  const childElements = _react.default.Children.toArray(children);
  const sectionWrapRequired = childElements[0] && typeof childElements[0].type === 'function';

  // create options node
  // we may have a plain array of Menu Options, in which case we'll wrap it with a section
  // an array of sections, each containing an array of Menu Options
  // sections may contain headings, which are defined as spans
  const options = _react.default.Children.map(childElements, (child, i) => {
    switch (child.type) {
      case 'section':
        // one level of sections to iterate before we get to the Menu Options
        return /*#__PURE__*/_react.default.createElement("section", {
          key: "menu-section-".concat((0, _uniqueId.default)(i))
        }, _react.default.Children.map(child.props.children, (sectionChild, j) => {
          switch (sectionChild.type) {
            case 'span':
              // Heading
              return sectionChild;
            default:
              // Menu Option
              return _extendMenuOption(sectionChild, "menu-option-".concat(i, ".").concat(j), optionIndex);
          }
        }));
      case 'span':
        // Heading
        return child;
      case 'div':
        return child;
      default:
        // Menu Option
        return _extendMenuOption(child, "menu-option-".concat(i), optionIndex);
    }
  });
  const optionsNode = sectionWrapRequired ? /*#__PURE__*/_react.default.createElement("section", null, options) : options;
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-expanded": open.toString(),
    "data-test": dataTest,
    "aria-haspopup": "true",
    className: wrapperClasses,
    onKeyDown: _handleKeyDown,
    ref: handleRef,
    style: {
      width: "".concat(width, "px")
    },
    title: title
  }, /*#__PURE__*/_react.default.createElement("button", {
    type: "button",
    disabled: disabled,
    className: "dropdown__label",
    onClick: onLabelClicked
  }, placeholderText ? /*#__PURE__*/_react.default.createElement("span", {
    className: "dropdown__placeholder"
  }, placeholderText) : /*#__PURE__*/_react.default.createElement("span", null, selectedOption.label || defaultText), /*#__PURE__*/_react.default.createElement("span", {
    className: "dropdown__icon"
  }, /*#__PURE__*/_react.default.createElement(_dropdownArrow.default, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown__options"
  }, optionsNode, showCancelApplyBtns && /*#__PURE__*/_react.default.createElement("div", {
    className: "select-dropdown__btn-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    mode: "secondary",
    onClick: onCancel,
    size: "small"
  }, "Cancel"), /*#__PURE__*/_react.default.createElement(_button.default, {
    disabled: !haveSelectedValues,
    dataTest: "".concat(dataTest, "-apply-btn"),
    onClick: onApplyAndClose,
    mode: 'primary',
    size: "small"
  }, "Apply and Close"))));
};
DropdownRenderer.propTypes = {
  /**
   * Child items. The nodes which React will pass down, defined inside the DropdownRenderer tag.
   */
  children: _propTypes.default.node,
  /**
   * Default text to show in a closed unselected state
   */
  defaultText: _propTypes.default.string,
  /**
   * Whether to disable the dropdown
   */
  disabled: _propTypes.default.bool,
  /**
   * The index of the currently-focused menu option
   */
  focusedOption: _propTypes.default.number,
  /**
   * Retrieve a reference to the dropdown DOM node
   */
  handleRef: _propTypes.default.func,
  /**
   * Whether user has selected any value from the dropdown
   */
  haveSelectedValues: _propTypes.default.bool,
  /**
   * Callback function to be excecuted when a Apply and Close button is clicked
   */
  onApplyAndClose: _propTypes.default.func,
  /**
   * Callback function to be excecuted when a Cancel button is clicked
   */
  onCancel: _propTypes.default.func,
  /**
   * Callback to be executed when the main label is clicked
   */
  onLabelClicked: _propTypes.default.func,
  /**
   * Callback to be executed when an option is selected
   */
  onOptionSelected: _propTypes.default.func,
  /**
   * Callback to be executed when the focused option changes
   */
  onSelectChanged: _propTypes.default.func,
  /**
   * Whether the dropdown is in an open state
   */
  open: _propTypes.default.bool,
  /**
   * An object containing selected option details.
   * This will be created based on the id, primaryText, value of a selected Menu Option.
   */
  selectedOption: _propTypes.default.shape({
    id: _propTypes.default.string,
    label: _propTypes.default.string,
    value: _propTypes.default.any
  }),
  /**
   * Title text for native tooltip
   */
  title: _propTypes.default.string,
  /**
   * The width for the component. Both the label and options are the same width
   */
  width: _propTypes.default.number,
  /**
   * Placeholder text when value from dropdown is not selected
   */
  placeholderText: _propTypes.default.string
};
var _default = exports.default = DropdownRenderer;