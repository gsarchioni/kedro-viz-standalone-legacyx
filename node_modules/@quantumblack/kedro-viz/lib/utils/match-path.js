"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findMatchedPath = void 0;
var _reactRouterDom = require("react-router-dom");
var _config = require("../config");
const findMatchedPath = (pathname, search) => {
  const matchedFlowchartMainPage = (0, _reactRouterDom.matchPath)(pathname + search, {
    exact: false,
    path: [_config.routes.flowchart.main]
  });
  const isQueryParamExist = (queryParam, queryString) => {
    const searchParams = new URLSearchParams(queryString);
    return searchParams.has(queryParam);
  };
  const hasQueryParam = param => {
    const hasPipelineId = isQueryParamExist(_config.params.pipeline, search);
    const hasParam = isQueryParamExist(param, search);
    return param ? hasPipelineId && hasParam : hasPipelineId;
  };
  const matchedSelectedPipeline = () => hasQueryParam();
  const matchedSelectedNodeId = () => hasQueryParam(_config.params.selected);
  const matchedSelectedNodeName = () => hasQueryParam(_config.params.selectedName);
  const matchedFocusedNode = () => hasQueryParam(_config.params.focused);
  const matchedExperimentTrackingMainPage = (0, _reactRouterDom.matchPath)(pathname + search, {
    exact: true,
    path: [_config.routes.experimentTracking.main]
  });
  const matchedSelectedView = (0, _reactRouterDom.matchPath)(pathname + search, {
    exact: true,
    path: [_config.routes.experimentTracking.selectedView]
  });
  const matchedSelectedRuns = (0, _reactRouterDom.matchPath)(pathname + search, {
    exact: true,
    path: [_config.routes.experimentTracking.selectedRuns]
  });
  return {
    matchedFlowchartMainPage,
    matchedSelectedPipeline,
    matchedSelectedNodeId,
    matchedSelectedNodeName,
    matchedFocusedNode,
    matchedExperimentTrackingMainPage,
    matchedSelectedView,
    matchedSelectedRuns
  };
};
exports.findMatchedPath = findMatchedPath;