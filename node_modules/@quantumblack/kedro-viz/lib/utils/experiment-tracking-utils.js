"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sanitizeValue = exports.generateCSVFileName = exports.constructExportData = void 0;
/**
 * Take a value and return a meaningful value for display on experiment tracking tables
 * @param {value} value The value to be sanitized
 * @returns A sanitized value
 */
const sanitizeValue = value => {
  if (value === '' || value === null || value === undefined) {
    return '-';
  } else if (typeof value === 'object' || typeof value === 'boolean') {
    return JSON.stringify(value);
  }
  return value;
};

/**
 * Takes a set of run metadata and run tracking data to construct the array object for csv export
 * @param {Array} runMetadata The set of runMetadata
 * @param {Array} runTrackingData The set of runTrackingData
 * @returns An array formatted for CSV export
 */
exports.sanitizeValue = sanitizeValue;
const constructExportData = (runMetadata, runTrackingData) => {
  let csvData = [];
  if (runMetadata && runTrackingData) {
    // Obtain runMetadata
    const runTitle = runMetadata === null || runMetadata === void 0 ? void 0 : runMetadata.map(run => sanitizeValue(run.title));
    const createdBy = runMetadata === null || runMetadata === void 0 ? void 0 : runMetadata.map(run => sanitizeValue(run.author));
    const gitSha = runMetadata === null || runMetadata === void 0 ? void 0 : runMetadata.map(run => sanitizeValue(run.gitSha));
    const gitBranch = runMetadata === null || runMetadata === void 0 ? void 0 : runMetadata.map(run => sanitizeValue(run.gitBranch));
    const runCommand = runMetadata === null || runMetadata === void 0 ? void 0 : runMetadata.map(run => sanitizeValue(run.runCommand));
    const notes = runMetadata === null || runMetadata === void 0 ? void 0 : runMetadata.map(run => sanitizeValue(run.notes));
    csvData.push(['Title', ...runTitle], ['Created By', ...createdBy], ['Git SHA', ...gitSha], ['Git Branch', ...gitBranch], ['Run Command', ...runCommand], ['Notes', ...notes]);

    // Create empty line between metadata fields and tracking data fields.
    csvData.push([]);
    buildCSVRows('Metrics');
    buildCSVRows('JSON Data');
    function buildCSVRows(section) {
      runTrackingData[section].forEach(trackingDataset => {
        const {
          datasetName,
          data
        } = trackingDataset;
        const dataKeyNames = Object.keys(data).sort((a, b) => {
          return a.localeCompare(b);
        });
        csvData.push([datasetName]);
        dataKeyNames.forEach(key => {
          let keyData = [key];
          data[key].forEach(dataField => keyData.push(dataField.value));
          csvData.push(keyData);
        });
        csvData.push([]);
      });
    }
  }
  return csvData;
};

/**
 * Take a the runMetadata list to generate a meaningful file name for csv export
 * @param {Array} runMetadata The set of runMetadata to be exported
 * @returns A string to be used as the file name
 */
exports.constructExportData = constructExportData;
const generateCSVFileName = runMetadata => {
  let filename = 'rundata';
  runMetadata === null || runMetadata === void 0 || runMetadata.forEach(run => filename += "-".concat(run.id));
  filename += '.csv';
  return filename;
};
exports.generateCSVFileName = generateCSVFileName;