"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFlagsState = exports.getFlagsMessage = exports.getFlagsFromUrl = exports.Flags = void 0;
var _config = require("../config");
/**
 * Flag definitions
 */
const Flags = exports.Flags = {
  /**
   * Returns `true` if the flag is defined otherwise `false`
   * @param {String} name The flag name to test
   * @returns {Boolean} The result
   */
  isDefined: name => Flags.names().includes(name),
  /**
   * Returns an array of defined flag names
   * @returns {Array} The defined flag names
   */
  names: () => Object.keys(_config.flags),
  /**
   * Returns an object mapping flag names to their default values
   * @returns {Object} The defined flag defaults
   */
  defaults: () => Flags.names().reduce((result, flag) => Object.assign(result, {
    [flag]: _config.flags[flag].default
  }), {})
};

/**
 * Returns an object with flags as set in given or current URL
 * @param {String=} url The URL (optional, default current location)
 * @returns {Object} An object with flags and their values
 */
const getFlagsFromUrl = url => {
  const flags = {};
  let urlParams;
  try {
    urlParams = new URL(url || document.location.href).searchParams;
  } catch (e) {
    console.warn('Feature flags are not supported in this browser');
    return flags;
  }
  [...urlParams].forEach(_ref => {
    let [name, value] = _ref;
    return Flags.isDefined(name) ? flags[name] = value === 'true' || value === '1' || value === '' : null;
  });
  return flags;
};

/**
 * Returns a user info message describing the status of all defined flags
 * @param {Object} flagsEnabled An object mapping of flag status
 * @returns {String} The info message
 */
exports.getFlagsFromUrl = getFlagsFromUrl;
const getFlagsMessage = flagsEnabled => {
  const allNames = Flags.names();
  if (allNames.length > 0) {
    let info = 'Experimental features 🏄‍♂️\n';
    allNames.forEach(name => {
      if (_config.flags[name].private) {
        return;
      }
      const isEnabled = flagsEnabled[name];
      const status = isEnabled ? 'Enabled' : 'Disabled';
      const statusIcon = isEnabled ? '🟢' : '⚪️';
      const icon = _config.flags[name].icon;
      const description = _config.flags[name].description;
      info += "\n".concat(statusIcon, " ").concat(icon, " \"").concat(name, "\" \xB7 ").concat(description, " \xB7 ").concat(status);
    });
    info += "\n\nSee docs on flags for more info \uD83D\uDCD6";
    info += "\nhttps://github.com/kedro-org/kedro-viz#flags";
    return info;
  }
};
exports.getFlagsMessage = getFlagsMessage;
const getFlagsState = () => {
  const allNames = Flags.names();
  return allNames.map(flag => {
    return {
      name: _config.flags[flag].name,
      value: flag,
      description: _config.flags[flag].description
    };
  });
};
exports.getFlagsState = getFlagsState;