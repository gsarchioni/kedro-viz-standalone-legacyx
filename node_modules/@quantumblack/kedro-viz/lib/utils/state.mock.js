"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setup = exports.prepareState = exports.mockState = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _enzyme = require("enzyme");
var _store = _interopRequireDefault(require("../store"));
var _initialState = _interopRequireDefault(require("../store/initial-state"));
var _spaceflightsMock = _interopRequireDefault(require("./data/spaceflights.mock.json"));
var _demoMock = _interopRequireDefault(require("./data/demo.mock.json"));
var _reducers = _interopRequireDefault(require("../reducers"));
var _layout = require("../selectors/layout");
var _graph = require("../actions/graph");
var _graph2 = require("./graph");
/**
 * Prime the state object for the testing environment
 * by running the asynchronous actions synchronously.
 * Optionally apply additional actions before or after layout.
 * @param {Object} props
 * @param {?Function[]} props.beforeLayoutActions Functions that given state return actions to reduce before layout
 * @param {?Function[]} props.afterLayoutActions Functions that given state return actions to reduce after layout
 */
const prepareState = _ref => {
  let {
    beforeLayoutActions = [],
    afterLayoutActions = [],
    ...props
  } = _ref;
  const initialState = (0, _initialState.default)(props);
  const actions = [
  // Per-test provided actions before layout:
  ...beforeLayoutActions,
  // Precalculate graph layout:
  state => {
    const layout = _graph2.graphNew;
    const graphState = (0, _layout.getGraphInput)(state);
    if (!graphState) {
      return state;
    }
    const graph = layout(graphState);
    return (0, _graph.updateGraph)(graph);
  },
  // Per-test provided actions after layout:
  ...afterLayoutActions];
  return actions.reduce((state, action) => (0, _reducers.default)(state, action(state)), initialState);
};

/**
 * Example state objects for use in tests of redux-enabled components
 */
exports.prepareState = prepareState;
const mockState = exports.mockState = {
  json: prepareState({
    data: 'json'
  }),
  demo: prepareState({
    data: _demoMock.default
  }),
  spaceflights: prepareState({
    data: _spaceflightsMock.default
  })
};

/**
 * Set up mounted/shallow Enzyme wrappers
 */
const setup = exports.setup = {
  /**
   * Mount a React-Redux Provider wrapper for testing connected components.
   * Optionally apply additional actions to prepare initial state before or after layout.
   * @param {Object} children React component(s)
   * @param {Object} props Store initialisation props
   * @param {?Function[]} props.beforeLayoutActions Functions that given state return actions to reduce before layout
   * @param {?Function[]} props.afterLayoutActions Functions that given state return actions to reduce after layout
   */
  mount: function (children) {
    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const initialState = Object.assign({}, prepareState({
      data: _spaceflightsMock.default,
      ...props
    }));
    return (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
      store: (0, _store.default)(initialState, 'json')
    }, children));
  },
  /**
   * Render a pure React component in a shallow wrapper
   * @param {Object} Component A React component
   * @param {Object} props React component props
   */
  shallow: function (Component) {
    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(Component, props));
  }
};