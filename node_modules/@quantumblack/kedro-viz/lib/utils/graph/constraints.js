"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.separationConstraint = exports.rowConstraint = exports.parallelConstraint = exports.layerConstraint = exports.crossingConstraint = void 0;
var _kiwi = require("kiwi.js");
/**
 * Constraint base definitions.
 *
 * Refer to LAYOUT_ENGINE.md for descriptions of each constraint.
 *
 * See `solve` function of `solver.js` for constraint specification.
 */

/**
 * Layout constraint in Y for separating rows
 */
const rowConstraint = exports.rowConstraint = {
  property: 'y',
  strict: (constraint, constants, variableA, variableB) => new _kiwi.Constraint(variableA.minus(variableB), _kiwi.Operator.Ge, constants.spaceY, _kiwi.Strength.required)
};

/**
 * Layout constraint in Y for separating layers
 */
const layerConstraint = exports.layerConstraint = {
  property: 'y',
  strict: (constraint, constants, variableA, variableB) => new _kiwi.Constraint(variableA.minus(variableB), _kiwi.Operator.Ge, constants.layerSpace, _kiwi.Strength.required)
};

/**
 * Layout constraint in X for minimising distance from source to target for straight edges
 */
const parallelConstraint = exports.parallelConstraint = {
  property: 'x',
  solve: constraint => {
    const {
      a,
      b,
      strength
    } = constraint;
    const resolve = strength * (a.x - b.x);
    a.x -= resolve;
    b.x += resolve;
  },
  strict: (constraint, constants, variableA, variableB) => new _kiwi.Constraint(variableA.minus(variableB), _kiwi.Operator.Eq, 0, _kiwi.Strength.create(1, 0, 0, constraint.strength))
};

/**
 * Crossing constraint in X for minimising edge crossings
 */
const crossingConstraint = exports.crossingConstraint = {
  property: 'x',
  solve: constraint => {
    const {
      edgeA,
      edgeB,
      separationA,
      separationB,
      strength
    } = constraint;

    // Amount to move each node towards required separation
    const resolveSource = strength * ((edgeA.sourceNode.x - edgeB.sourceNode.x - separationA) / separationA);
    const resolveTarget = strength * ((edgeA.targetNode.x - edgeB.targetNode.x - separationB) / separationB);

    // Apply the resolve each node
    edgeA.sourceNode.x -= resolveSource;
    edgeB.sourceNode.x += resolveSource;
    edgeA.targetNode.x -= resolveTarget;
    edgeB.targetNode.x += resolveTarget;
  }
};

/**
 * Layout constraint in X for minimum node separation
 */
const separationConstraint = exports.separationConstraint = {
  property: 'x',
  strict: (constraint, constants, variableA, variableB) => new _kiwi.Constraint(variableB.minus(variableA), _kiwi.Operator.Ge, constraint.separation, _kiwi.Strength.required)
};