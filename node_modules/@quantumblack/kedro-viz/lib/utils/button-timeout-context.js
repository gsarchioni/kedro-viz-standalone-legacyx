"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonTimeoutContextProvider = exports.ButtonTimeoutContext = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const ButtonTimeoutContext = exports.ButtonTimeoutContext = /*#__PURE__*/(0, _react.createContext)(null);

/**
 * Provides a way to pass different states to a button depending on whether
 * it's successful or not.
 * {@returns hasNotInteracted and setHasNotInteracted} these 2 are only used for modal with editable fields
 */
const ButtonTimeoutContextProvider = _ref => {
  let {
    children
  } = _ref;
  const [isSuccessful, setIsSuccessful] = (0, _react.useState)(false);
  const [showModal, setShowModal] = (0, _react.useState)(false);
  const [hasNotInteracted, setHasNotInteracted] = (0, _react.useState)(true);
  const handleClick = () => {
    setShowModal(true);
    const localStateTimeout = setTimeout(() => {
      setIsSuccessful(true);
    }, 500);

    // so user is able to see the success message on the button first before the modal goes away
    const modalTimeout = setTimeout(() => {
      setShowModal(false);
    }, 1500);

    // Delay the reset so the user can't see the button text change.
    const resetTimeout = setTimeout(() => {
      setIsSuccessful(false);
      setHasNotInteracted(true);
    }, 2000);
    return () => {
      clearTimeout(localStateTimeout);
      clearTimeout(modalTimeout);
      clearTimeout(resetTimeout);
    };
  };
  return /*#__PURE__*/_react.default.createElement(ButtonTimeoutContext.Provider, {
    value: {
      handleClick,
      hasNotInteracted,
      isSuccessful,
      setHasNotInteracted: state => setHasNotInteracted(state),
      setIsSuccessful: state => setIsSuccessful(state),
      showModal
    }
  }, children);
};
exports.ButtonTimeoutContextProvider = ButtonTimeoutContextProvider;