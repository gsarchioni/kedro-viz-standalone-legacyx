"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPDATE_GRAPH_LAYOUT = exports.TOGGLE_GRAPH_LOADING = void 0;
exports.calculateGraph = calculateGraph;
exports.toggleLoading = toggleLoading;
exports.updateGraph = updateGraph;
var _worker = require("../utils/worker");
var _index = require("./index");
const TOGGLE_GRAPH_LOADING = exports.TOGGLE_GRAPH_LOADING = 'TOGGLE_GRAPH_LOADING';

/**
 * Toggle whether to display the loading spinner
 * @param {Boolean} loading
 */
function toggleLoading(loading) {
  return {
    type: TOGGLE_GRAPH_LOADING,
    loading
  };
}
const UPDATE_GRAPH_LAYOUT = exports.UPDATE_GRAPH_LAYOUT = 'UPDATE_GRAPH_LAYOUT';

/**
 * Update the graph layout object
 * @param {Object} graph
 */
function updateGraph(graph) {
  return {
    type: UPDATE_GRAPH_LAYOUT,
    graph
  };
}

/**
 * Assign layout engine to use based on the newgraph
 * @param {Object} instance Worker parent instance
 * @param {Object} state A subset of main state
 * @return {Function} Promise function
 */
const layout = async (instance, state) => instance.graphNew(state);

// Prepare new layout worker
const layoutWorker = (0, _worker.preventWorkerQueues)(_worker.graph, layout);

/**
 * Async action to calculate graph layout in a web worker
 * whiled displaying a loading spinner
 * @param {Object} graphState A subset of main state
 * @return {Function} A promise that resolves when the calculation is done
 */
function calculateGraph(graphState) {
  if (!graphState) {
    return updateGraph(graphState);
  }
  return async function (dispatch) {
    dispatch(toggleLoading(true));
    const graph = await layoutWorker(graphState);
    dispatch((0, _index.toggleGraph)(true));
    dispatch(toggleLoading(false));
    return dispatch(updateGraph(graph));
  };
}