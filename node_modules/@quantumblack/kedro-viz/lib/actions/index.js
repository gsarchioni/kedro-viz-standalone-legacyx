"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPDATE_ZOOM = exports.UPDATE_STATE_FROM_OPTIONS = exports.UPDATE_RUN_TITLE = exports.UPDATE_RUN_NOTES = exports.UPDATE_CHART_SIZE = exports.TOGGLE_THEME = exports.TOGGLE_TEXT_LABELS = exports.TOGGLE_SIDEBAR = exports.TOGGLE_SHOW_FEATURE_HINTS = exports.TOGGLE_SHAREABLE_URL_MODAL = exports.TOGGLE_SETTINGS_MODAL = exports.TOGGLE_PARAMETERS_HOVERED = exports.TOGGLE_MODULAR_PIPELINE_FOCUS_MODE = exports.TOGGLE_MINIMAP = exports.TOGGLE_METADATA_MODAL = exports.TOGGLE_LAYERS = exports.TOGGLE_IS_PRETTY_NAME = exports.TOGGLE_IGNORE_LARGE_WARNING = exports.TOGGLE_HOVERED_FOCUS_MODE = exports.TOGGLE_GRAPH = exports.TOGGLE_EXPORT_MODAL = exports.TOGGLE_EXPAND_ALL_PIPELINES = exports.TOGGLE_CODE = exports.TOGGLE_BOOKMARK = exports.RESET_DATA = exports.CHANGE_FLAG = void 0;
exports.changeFlag = changeFlag;
exports.resetData = resetData;
exports.toggleBookmark = toggleBookmark;
exports.toggleCode = toggleCode;
exports.toggleExpandAllPipelines = toggleExpandAllPipelines;
exports.toggleExportModal = toggleExportModal;
exports.toggleFocusMode = toggleFocusMode;
exports.toggleGraph = toggleGraph;
exports.toggleHoveredFocusMode = toggleHoveredFocusMode;
exports.toggleIgnoreLargeWarning = toggleIgnoreLargeWarning;
exports.toggleIsPrettyName = toggleIsPrettyName;
exports.toggleLayers = toggleLayers;
exports.toggleMiniMap = toggleMiniMap;
exports.toggleParametersHovered = toggleParametersHovered;
exports.togglePlotModal = togglePlotModal;
exports.toggleSettingsModal = toggleSettingsModal;
exports.toggleShareableUrlModal = toggleShareableUrlModal;
exports.toggleShowFeatureHints = toggleShowFeatureHints;
exports.toggleSidebar = toggleSidebar;
exports.toggleTextLabels = toggleTextLabels;
exports.toggleTheme = toggleTheme;
exports.updateChartSize = updateChartSize;
exports.updateRunNotes = updateRunNotes;
exports.updateRunTitle = updateRunTitle;
exports.updateStateFromOptions = void 0;
exports.updateZoom = updateZoom;
const RESET_DATA = exports.RESET_DATA = 'RESET_DATA';

/**
 * Overwrite the existing data store when receiving new data from upstream
 * @param {Object} data New pipeline state data
 */
function resetData(data) {
  return {
    type: RESET_DATA,
    data
  };
}
const TOGGLE_LAYERS = exports.TOGGLE_LAYERS = 'TOGGLE_LAYERS';

/**
 * Toggle whether to show layers on/off
 * @param {Boolean} visible True if layers are to be shown
 */
function toggleLayers(visible) {
  return {
    type: TOGGLE_LAYERS,
    visible
  };
}
const TOGGLE_EXPAND_ALL_PIPELINES = exports.TOGGLE_EXPAND_ALL_PIPELINES = 'TOGGLE_EXPAND_ALL_PIPELINES';

/**
 * Toggle whether to expand all modular pipelines or collapse
 * @param {Boolean} shouldExpandAllPipelines
 */
function toggleExpandAllPipelines(shouldExpandAllPipelines) {
  return {
    type: TOGGLE_EXPAND_ALL_PIPELINES,
    shouldExpandAllPipelines
  };
}
const TOGGLE_EXPORT_MODAL = exports.TOGGLE_EXPORT_MODAL = 'TOGGLE_EXPORT_MODAL';

/**
 * Toggle whether to show the export modal
 * @param {Boolean} visible True if the modal is to be shown
 */
function toggleExportModal(visible) {
  return {
    type: TOGGLE_EXPORT_MODAL,
    visible
  };
}
const TOGGLE_SHAREABLE_URL_MODAL = exports.TOGGLE_SHAREABLE_URL_MODAL = 'TOGGLE_SHAREABLE_URL_MODAL';

/**
 * Toggle whether to show the shareable URL modal
 * @param {Boolean} visible True if the modal is to be shown
 */
function toggleShareableUrlModal(visible) {
  return {
    type: TOGGLE_SHAREABLE_URL_MODAL,
    visible
  };
}
const TOGGLE_SETTINGS_MODAL = exports.TOGGLE_SETTINGS_MODAL = 'TOGGLE_SETTINGS_MODAL';

/**
 * Toggle whether to show the settings modal
 * @param {Boolean} visible True if the modal is to be shown
 */
function toggleSettingsModal(visible) {
  return {
    type: TOGGLE_SETTINGS_MODAL,
    visible
  };
}
const TOGGLE_METADATA_MODAL = exports.TOGGLE_METADATA_MODAL = 'TOGGLE_METADATA_MODAL';

/**
 * Toggle whether to show the plot modal
 * @param {Boolean} visible True if the modal is to be shown
 */
function togglePlotModal(visible) {
  return {
    type: TOGGLE_METADATA_MODAL,
    visible
  };
}
const TOGGLE_GRAPH = exports.TOGGLE_GRAPH = 'TOGGLE_GRAPH';

/**
 * Toggle graph visible/hidden
 * @param {Boolean} visible Whether graph is shown
 */
function toggleGraph(visible) {
  return {
    type: TOGGLE_GRAPH,
    visible
  };
}
const TOGGLE_TEXT_LABELS = exports.TOGGLE_TEXT_LABELS = 'TOGGLE_TEXT_LABELS';

/**
 * Toggle whether to show text labels on/off
 * @param {Boolean} textLabels True if text labels are to be shown
 */
function toggleTextLabels(textLabels) {
  return {
    type: TOGGLE_TEXT_LABELS,
    textLabels
  };
}
const TOGGLE_IS_PRETTY_NAME = exports.TOGGLE_IS_PRETTY_NAME = 'TOGGLE_IS_PRETTY_NAME';

/**
 * Toggle whether to show pretty name on/off
 * @param {Boolean} isPrettyName True if pretty name is to be shown
 */
function toggleIsPrettyName(isPrettyName) {
  return {
    type: TOGGLE_IS_PRETTY_NAME,
    isPrettyName
  };
}
const TOGGLE_SHOW_FEATURE_HINTS = exports.TOGGLE_SHOW_FEATURE_HINTS = 'TOGGLE_SHOW_FEATURE_HINTS';

/**
 * Toggle whether to turn feature hints on/off
 * @param {Boolean} showFeatureHints True if features hints are to be shown
 */
function toggleShowFeatureHints(showFeatureHints) {
  return {
    type: TOGGLE_SHOW_FEATURE_HINTS,
    showFeatureHints
  };
}
const TOGGLE_SIDEBAR = exports.TOGGLE_SIDEBAR = 'TOGGLE_SIDEBAR';

/**
 * Toggle sidebar visible/hidden
 * @param {Boolean} visible Whether sidebar nav is shown
 */
function toggleSidebar(visible) {
  return {
    type: TOGGLE_SIDEBAR,
    visible
  };
}
const TOGGLE_THEME = exports.TOGGLE_THEME = 'TOGGLE_THEME';

/**
 * Switch between light/dark theme
 * @param {String} theme Theme name
 */
function toggleTheme(theme) {
  return {
    type: TOGGLE_THEME,
    theme
  };
}
const UPDATE_CHART_SIZE = exports.UPDATE_CHART_SIZE = 'UPDATE_CHART_SIZE';

/**
 * Store the chart size, based on the window
 * @param {Object} chartSize getBoundingClientRect value
 */
function updateChartSize(chartSize) {
  return {
    type: UPDATE_CHART_SIZE,
    chartSize
  };
}
const UPDATE_ZOOM = exports.UPDATE_ZOOM = 'UPDATE_ZOOM';

/**
 * Store the zoom
 * @param {Object} zoom The zoom transform
 */
function updateZoom(zoom) {
  return {
    type: UPDATE_ZOOM,
    zoom
  };
}
const TOGGLE_MINIMAP = exports.TOGGLE_MINIMAP = 'TOGGLE_MINIMAP';

/**
 * Toggle mini map
 * @param {String} visible Visibility status
 */
function toggleMiniMap(visible) {
  return {
    type: TOGGLE_MINIMAP,
    visible
  };
}
const CHANGE_FLAG = exports.CHANGE_FLAG = 'CHANGE_FLAG';

/**
 * Change the given feature flag
 * @param {String} name The flag name
 * @param {Value} value The value to set
 */
function changeFlag(name, value) {
  return {
    type: CHANGE_FLAG,
    name,
    value
  };
}
const TOGGLE_IGNORE_LARGE_WARNING = exports.TOGGLE_IGNORE_LARGE_WARNING = 'TOGGLE_IGNORE_LARGE_WARNING';

/**
 * Resets the ignoreLargeWarning field in the state indicating user preference to enable large graphs to load
 * @param {Boolean} ignoreLargeWarning
 */
function toggleIgnoreLargeWarning(ignoreLargeWarning) {
  return {
    type: TOGGLE_IGNORE_LARGE_WARNING,
    ignoreLargeWarning
  };
}
const TOGGLE_CODE = exports.TOGGLE_CODE = 'TOGGLE_CODE';

/**
 * Toggle code panel
 * @param {String} visible Visibility status
 */
function toggleCode(visible) {
  return {
    type: TOGGLE_CODE,
    visible
  };
}
const TOGGLE_PARAMETERS_HOVERED = exports.TOGGLE_PARAMETERS_HOVERED = 'TOGGLE_PARAMETERS_HOVERED';

/**
 * Update the value of the currently-active hovered node
 * @param {Boolean} hoveredParameters True if parameters heading in the sidebar has been hovered
 */
function toggleParametersHovered(hoveredParameters) {
  return {
    type: TOGGLE_PARAMETERS_HOVERED,
    hoveredParameters
  };
}
const TOGGLE_MODULAR_PIPELINE_FOCUS_MODE = exports.TOGGLE_MODULAR_PIPELINE_FOCUS_MODE = 'TOGGLE_MODULAR_PIPELINE_FOCUS_MODE';

/**
 * Update the value of the selected modular pipeline under focus mode
 * @param {Object} modularPipeline The selected modular pipeline for focus mode
 */
function toggleFocusMode(modularPipeline) {
  return {
    type: TOGGLE_MODULAR_PIPELINE_FOCUS_MODE,
    modularPipeline
  };
}
const TOGGLE_HOVERED_FOCUS_MODE = exports.TOGGLE_HOVERED_FOCUS_MODE = 'TOGGLE_HOVERED_FOCUS_MODE';

/**
 * Update the value of the of the currently-active hovered node from focus mode
 * @param {Boolean} hoveredFocusMode True if FocudModeIcon in the sidebar has been hovered
 */
function toggleHoveredFocusMode(hoveredFocusMode) {
  return {
    type: TOGGLE_HOVERED_FOCUS_MODE,
    hoveredFocusMode
  };
}
const TOGGLE_BOOKMARK = exports.TOGGLE_BOOKMARK = 'TOGGLE_BOOKMARK';

/**
 * Toggle bookmark of Run
 * @param {boolean} bookmark
 * @param {string} runId
 */
function toggleBookmark(bookmark, runId) {
  return {
    type: TOGGLE_BOOKMARK,
    bookmark,
    runId
  };
}
const UPDATE_RUN_TITLE = exports.UPDATE_RUN_TITLE = 'UPDATE_RUN_TITLE';

/**
 * Update Run title
 * @param {String} title
 * @param {string} runId
 */
function updateRunTitle(title, runId) {
  return {
    type: UPDATE_RUN_TITLE,
    title,
    runId
  };
}
const UPDATE_RUN_NOTES = exports.UPDATE_RUN_NOTES = 'UPDATE_RUN_NOTES';

/**
 * Update Run Notes
 * @param {String} notes
 * @param {string} runId
 */
function updateRunNotes(notes, runId) {
  return {
    type: UPDATE_RUN_NOTES,
    notes,
    runId
  };
}
const UPDATE_STATE_FROM_OPTIONS = exports.UPDATE_STATE_FROM_OPTIONS = 'UPDATE_STATE_FROM_OPTIONS';

/**
 * Update state with latest options prop coming from the react component
 * @param {Object} updatedOptions
 */
const updateStateFromOptions = updatedOptions => {
  return {
    type: UPDATE_STATE_FROM_OPTIONS,
    payload: updatedOptions
  };
};
exports.updateStateFromOptions = updateStateFromOptions;