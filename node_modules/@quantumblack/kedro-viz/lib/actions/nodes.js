"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TOGGLE_NODE_HOVERED = exports.TOGGLE_NODE_DATA_LOADING = exports.TOGGLE_NODE_CLICKED = exports.TOGGLE_NODES_DISABLED = exports.ADD_NODE_METADATA = void 0;
exports.addNodeMetadata = addNodeMetadata;
exports.loadNodeData = loadNodeData;
exports.toggleNodeClicked = toggleNodeClicked;
exports.toggleNodeDataLoading = toggleNodeDataLoading;
exports.toggleNodeHovered = toggleNodeHovered;
exports.toggleNodesDisabled = toggleNodesDisabled;
var _utils = require("../utils");
var _loadData = _interopRequireDefault(require("../store/load-data"));
const TOGGLE_NODE_CLICKED = exports.TOGGLE_NODE_CLICKED = 'TOGGLE_NODE_CLICKED';

/**
 * Update the value of the currently-active clicked node
 * @param {String|null} nodeClicked The node's unique identifier
 */
function toggleNodeClicked(nodeClicked) {
  return {
    type: TOGGLE_NODE_CLICKED,
    nodeClicked
  };
}
const TOGGLE_NODES_DISABLED = exports.TOGGLE_NODES_DISABLED = 'TOGGLE_NODES_DISABLED';

/**
 * Toggle a selected group of nodes' visibility on/off
 * @param {Array} nodeIDs The nodes' unique identifiers
 * @param {Boolean} isDisabled Whether the node should be visible
 */
function toggleNodesDisabled(nodeIDs, isDisabled) {
  return {
    type: TOGGLE_NODES_DISABLED,
    nodeIDs,
    isDisabled
  };
}
const TOGGLE_NODE_HOVERED = exports.TOGGLE_NODE_HOVERED = 'TOGGLE_NODE_HOVERED';

/**
 * Update the value of the currently-active hovered node
 * @param {String|null} nodeHovered The node's unique identifier
 */
function toggleNodeHovered(nodeHovered) {
  return {
    type: TOGGLE_NODE_HOVERED,
    nodeHovered
  };
}
const TOGGLE_NODE_DATA_LOADING = exports.TOGGLE_NODE_DATA_LOADING = 'TOGGLE_NODE_DATA_LOADING';

/**
 * Toggle whether to display the loading spinner
 * @param {Boolean} loading True if pipeline is still loading
 */
function toggleNodeDataLoading(loading) {
  return {
    type: TOGGLE_NODE_DATA_LOADING,
    loading
  };
}
const ADD_NODE_METADATA = exports.ADD_NODE_METADATA = 'ADD_NODE_METADATA';

/**
 * Toggle whether to display the loading spinner
 * @param {Object} data The node's data
 */
function addNodeMetadata(data) {
  return {
    type: ADD_NODE_METADATA,
    data
  };
}

/**
 * update node metadata on selection, loading new data if it has not been previously called
 * @param {String} nodeID node id of clicked node
 * @return {Function} A promise that resolves when the data is loaded
 */
function loadNodeData(nodeID) {
  return async function (dispatch, getState) {
    const {
      dataSource,
      node
    } = getState();
    dispatch(toggleNodeClicked(nodeID));
    if (dataSource === 'json' && nodeID && !node.fetched[nodeID]) {
      dispatch(toggleNodeDataLoading(true));
      const url = (0, _utils.getUrl)('nodes', nodeID);
      const nodeData = await (0, _loadData.default)(url);
      dispatch(addNodeMetadata({
        id: nodeID,
        data: nodeData
      }));
      dispatch(toggleNodeDataLoading(false));
    }
  };
}