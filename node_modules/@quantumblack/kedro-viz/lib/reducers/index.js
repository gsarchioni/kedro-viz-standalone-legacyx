"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _redux = require("redux");
var _runsMetadata = _interopRequireDefault(require("./runs-metadata"));
var _flags = _interopRequireDefault(require("./flags"));
var _graph = _interopRequireDefault(require("./graph"));
var _layers = _interopRequireDefault(require("./layers"));
var _loading = _interopRequireDefault(require("./loading"));
var _nodes = _interopRequireDefault(require("./nodes"));
var _nodeType = _interopRequireDefault(require("./node-type"));
var _pipeline = _interopRequireDefault(require("./pipeline"));
var _tags = _interopRequireDefault(require("./tags"));
var _merge = _interopRequireDefault(require("lodash/merge"));
var _modularPipelines = _interopRequireDefault(require("./modular-pipelines"));
var _visible = _interopRequireDefault(require("./visible"));
var _actions = require("../actions");
var _preferences = _interopRequireDefault(require("./preferences"));
/**
 * Create a generic reducer
 * @param {*} initialState Default state
 * @param {String} type Action type
 * @param {String} key Action payload key
 * @return {*} Updated state
 */
const createReducer = (initialState, type, key) => function () {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (typeof key !== 'undefined' && action.type === type) {
    return action[key];
  }
  return state;
};

/**
 * Reset/update application-wide data
 * @param {Object} state Complete app state
 * @param {Object} action Redux action
 * @return {Object} Updated(?) state
 */
function resetDataReducer() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _actions.RESET_DATA) {
    return Object.assign({}, state, action.data);
  }
  return state;
}

/**
 * Update state from options props coming form react component
 * @param {Object} state Complete app state
 * @param {Object} action Redux action
 * @return {Object} Updated state
 */
function updateStateFromOptionsReducer() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;
  if (action.type === _actions.UPDATE_STATE_FROM_OPTIONS) {
    return (0, _merge.default)({}, state, action.payload);
  }
  return state;
}
const combinedReducer = (0, _redux.combineReducers)({
  // These props have their own reducers in other files
  flags: _flags.default,
  graph: _graph.default,
  layer: _layers.default,
  loading: _loading.default,
  node: _nodes.default,
  nodeType: _nodeType.default,
  pipeline: _pipeline.default,
  tag: _tags.default,
  modularPipeline: _modularPipelines.default,
  visible: _visible.default,
  runsMetadata: _runsMetadata.default,
  userPreferences: _preferences.default,
  // These props don't have any actions associated with them
  display: createReducer(null),
  dataSource: createReducer(null),
  edge: createReducer({}),
  // These props have very simple non-nested actions
  chartSize: createReducer({}, _actions.UPDATE_CHART_SIZE, 'chartSize'),
  zoom: createReducer({}, _actions.UPDATE_ZOOM, 'zoom'),
  textLabels: createReducer(true, _actions.TOGGLE_TEXT_LABELS, 'textLabels'),
  theme: createReducer('dark', _actions.TOGGLE_THEME, 'theme'),
  isPrettyName: createReducer(false, _actions.TOGGLE_IS_PRETTY_NAME, 'isPrettyName'),
  showFeatureHints: createReducer(true, _actions.TOGGLE_SHOW_FEATURE_HINTS, 'showFeatureHints'),
  hoveredParameters: createReducer(false, _actions.TOGGLE_PARAMETERS_HOVERED, 'hoveredParameters'),
  ignoreLargeWarning: createReducer(false, _actions.TOGGLE_IGNORE_LARGE_WARNING, 'ignoreLargeWarning'),
  hoveredFocusMode: createReducer(false, _actions.TOGGLE_HOVERED_FOCUS_MODE, 'hoveredFocusMode'),
  expandAllPipelines: createReducer(false, _actions.TOGGLE_EXPAND_ALL_PIPELINES, 'shouldExpandAllPipelines')
});
const rootReducer = (state, action) => {
  let newState = resetDataReducer(state, action);
  newState = updateStateFromOptionsReducer(newState, action);
  return combinedReducer(newState, action);
};
var _default = exports.default = rootReducer;