"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _nodes = require("../actions/nodes");
var _pipelines = require("../actions/pipelines");
function nodeReducer() {
  let nodeState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;
  const updateState = newState => Object.assign({}, nodeState, newState);
  switch (action.type) {
    case _nodes.TOGGLE_NODE_CLICKED:
      {
        return updateState({
          clicked: action.nodeClicked
        });
      }
    case _nodes.TOGGLE_NODES_DISABLED:
      {
        return updateState({
          clicked: action.nodeIDs.includes(nodeState.clicked) ? null : nodeState.clicked,
          disabled: action.nodeIDs.reduce((disabled, id) => Object.assign({}, disabled, {
            [id]: action.isDisabled
          }), nodeState.disabled)
        });
      }
    case _nodes.TOGGLE_NODE_HOVERED:
      {
        return updateState({
          hovered: action.nodeHovered
        });
      }
    case _pipelines.UPDATE_ACTIVE_PIPELINE:
      {
        return updateState({
          clicked: null,
          hovered: null
        });
      }
    case _nodes.ADD_NODE_METADATA:
      {
        const {
          id,
          data
        } = action.data;
        return updateState({
          fetched: Object.assign({}, nodeState.fetched, {
            [id]: true
          }),
          code: Object.assign({}, nodeState.code, {
            [id]: data.code
          }),
          filepath: Object.assign({}, nodeState.filepath, {
            [id]: data.filepath
          }),
          parameters: Object.assign({}, nodeState.parameters, {
            [id]: data.parameters
          }),
          inputs: Object.assign({}, nodeState.inputs, {
            [id]: data.inputs
          }),
          outputs: Object.assign({}, nodeState.outputs, {
            [id]: data.outputs
          }),
          // the data returned from the API under the field name 'type' for dataset type nodes
          datasetType: Object.assign({}, nodeState.datasetType, {
            [id]: data.type
          }),
          originalType: Object.assign({}, nodeState.originalType, {
            [id]: data.original_type
          }),
          transcodedTypes: Object.assign({}, nodeState.transcodedTypes, {
            [id]: data.transcoded_types
          }),
          runCommand: Object.assign({}, nodeState.runCommand, {
            [id]: data.run_command
          }),
          preview: Object.assign({}, nodeState.preview, {
            [id]: data.preview
          }),
          previewType: Object.assign({}, nodeState.previewType, {
            [id]: data.preview_type
          }),
          stats: Object.assign({}, nodeState.stats, {
            [id]: data.stats
          })
        });
      }
    default:
      return nodeState;
  }
}
var _default = exports.default = nodeReducer;