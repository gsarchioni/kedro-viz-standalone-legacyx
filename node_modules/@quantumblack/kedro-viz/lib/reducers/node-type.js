"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _nodeType = require("../actions/node-type");
/**
 * See actions/node-type.js for details on the 'unset' value.
 */
const allNodeTypesUnset = {
  parameters: _nodeType.NODE_TYPE_DISABLED_UNSET,
  task: _nodeType.NODE_TYPE_DISABLED_UNSET,
  data: _nodeType.NODE_TYPE_DISABLED_UNSET
};
const isNodeTypeUnset = nodeTypeValue => nodeTypeValue === _nodeType.NODE_TYPE_DISABLED_UNSET;
const isNodeTypeDisabled = nodeTypeValue => nodeTypeValue === true;
function nodeTypeReducer() {
  let nodeTypeState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case _nodeType.TOGGLE_TYPE_DISABLED:
      {
        const nextDisabledState = {
          ...nodeTypeState.disabled,
          ...action.typeIDs
        };
        const nextTypesDisabled = Object.values(nextDisabledState);

        // If no types will be enabled
        if (nextTypesDisabled.every(isNodeTypeDisabled)) {
          // Then reset all types to unset (defaulting to enabled)
          return {
            ...nodeTypeState,
            disabled: {
              ...allNodeTypesUnset
            }
          };
        }

        // At least one type is enabled, set any unset types to disabled
        for (const type in nextDisabledState) {
          if (isNodeTypeUnset(nextDisabledState[type])) {
            nextDisabledState[type] = true;
          }
        }
        return {
          ...nodeTypeState,
          disabled: nextDisabledState
        };
      }
    default:
      return nodeTypeState;
  }
}
var _default = exports.default = nodeTypeReducer;